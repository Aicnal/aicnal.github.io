<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自建图床的一点心得</title>
      <link href="/2024/11/02/Tech/%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/"/>
      <url>/2024/11/02/Tech/%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="自建图床的一点心得"><a href="#自建图床的一点心得" class="headerlink" title="自建图床的一点心得"></a>自建图床的一点心得</h1><blockquote><p>没有恰任何钱，纯自费体验</p></blockquote><p>平时大家写MD的应该或多或少都接触过“图床”。图床原本是用作存储文章图片的，为的是能实现“即看即得”。我们不必再在本地保存，依赖于“图床”，确保了照片读取的快速与稳定。</p><p>实际上我也接触过一些“免费图床”，诸如著名的<code>sm.ms</code>、<code>telegraph</code>等等，但这些图床都存在一个问题——上传文件大小有限制、读取速度慢、大陆延时高；一些其他的图床则可能存在着“跑路”的问题，一些图片比较多或者追求稳定的朋友可能会选择使用“<strong>对象存储</strong>”自建图床。</p><h2 id="入坑"><a href="#入坑" class="headerlink" title="入坑"></a>入坑</h2><p>刚开始我使用对象存储搭建图床是因为我使用的本地图床加载速度太慢（服务器带宽小），而且我的博客还经常迁移，因此使用对象存储搭建图床，将文章中的图片做稳定化存储对于我来说无疑是重要和有意义的。</p><p>因为之前使用香港云服务器，托管商是<em>某云</em>，因此入坑他们家的对象存储，当时应该是刚刚推出对象存储服务，价格很便宜，一口气续了半年，第一次花了54.6，后来发现套餐选的不太行，又重新换，再多花了18块升级套餐</p><p><img src="https://img.juniortree.com/202408081210769.png"></p><p><img src="https://img.juniortree.com/202408081210807.png"></p><p>具体套餐如下：</p><p><img src="https://img.juniortree.com/202408081212842.png"></p><p>其实对于图床来说哪怕是最低的套餐都有点太多了，50G根本用不完，我写了半年的博客，甚至还存了一些视频只用了大概0.5G左右，绝大多数的空间被浪费了</p><p><img src="https://img.juniortree.com/202408081213896.png"></p><p>实际上用的过程中速度还是挺快的？节点在<strong>湖北十堰</strong>，只有一个节点，海外的访问速度很慢（这也是大多数对象存储存在的问题），必须套一个CDN使用，国内速度很好</p><p><img src="https://img.juniortree.com/202408081215724.png"></p><p>大概在十月份到期，续费大概要：</p><p><img src="https://img.juniortree.com/202408081301569.png"></p><p>价格确实有点贵</p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><p>后来使用了鹅厂的CDN服务，然后就了解了一下COS资费和价格</p><p>鹅厂的对象存储服务分为三种资源包：</p><ul><li>存储容量</li><li>流量</li><li>读写请求</li></ul><p>我写博客做图床所需要的容量并不多，10G足矣，又因为我又CDN，其回源流量资费更低，读写请求10万次价格很低，基本上可以忽略不计，那么这样算一下一年使用大厂对象存储做图床的价格大概是：</p><table><thead><tr><th>资源包类型</th><th>价格（元）</th></tr></thead><tbody><tr><td>存储容量（10G）</td><td>9.77</td></tr><tr><td>流量（CDN回源流量包 10G）</td><td>12. 42</td></tr><tr><td>读写请求（10万次）</td><td>0.83</td></tr></tbody></table><p>这样算下来一年对象存储图床的价格大概是：23.02元</p><p>如果再算上一年边缘计算EO的价格65元，总共的价格是88.02元，低于我原来单独使用对象存储的价格，而且新注册的用户还会送半年50G的存储容量</p><p>其中<strong>CDN回源流量包</strong>，你必须使用EO套到原COS的域名上</p><p>鹅厂的边缘计算也很有意思，本质是一个和CloudFlare代理一样的东西，只不过他在国内的访问速度更快😇（国外也有节点</p><p>除此之外还能抵抗DDOS攻击，套餐每月50G的流量是清洗过的流量，具体抵抗效果的还没试过</p><h2 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h2><p>前面说了边缘函数，其提供了能自动将<code>jpg</code>和<code>png</code>转换的功能</p><p><img src="https://img.juniortree.com/202408081320496.png"></p><p>目前还不要钱（卷起来卷起来</p><p><img src="https://img.juniortree.com/202408081321601.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>某云的有些产品确实不错，诸如游戏云，香港云，不久前还推出了宁波大盘鸡，对象存储的速度也很快</p><p>不过我还是准备只用来写博客，某云的套餐就有点太多了，如果我不用来做图床，而是用来当下载站、数据湖可能会</p><p>考虑一下</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夏天夏天</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%A4%8F%E5%A4%A9%E5%A4%8F%E5%A4%A9/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%A4%8F%E5%A4%A9%E5%A4%8F%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>喜欢夏天，尤其是和你在一起的每一天</p><p><img src="https://img.juniortree.com/202408081924818.HEIC"></p><p><img src="https://img.juniortree.com/202408081930253.HEIC"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些思考</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h1><p>我们一开始所想要的，所追求的，并不是我们最后正在得到的</p><p>可能我们做很多事情的时候都会头脑发热，比如说还是读书时候跟风谈的恋爱、读大学的时候一门心思想学的专业、突发奇想想去学一门编程语言…</p><p>这些经历的最后结果我们不得而知，我也经常怀疑过我们做这些事情的价值——以前想过但是最后没有做成，那么这件事情就真的没有意义吗？</p><p>答案显而易见是否定的，成长过程中做出的每一个选择，走过的每一段路，在未来的某个时刻都会反哺我们。做当下最想做的就好了，至于得失兴盛，那是我们后来的判断</p><p><img src="https://img.juniortree.com/202408091948988.png"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于腾讯云EdgeOne的自适应webp转换</title>
      <link href="/2024/11/02/Tech/%E5%9F%BA%E4%BA%8E%E8%85%BE%E8%AE%AF%E4%BA%91EdgeOne%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94webp%E8%BD%AC%E6%8D%A2/"/>
      <url>/2024/11/02/Tech/%E5%9F%BA%E4%BA%8E%E8%85%BE%E8%AE%AF%E4%BA%91EdgeOne%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94webp%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基于腾讯云EdgeOne的自适应webp转换"><a href="#基于腾讯云EdgeOne的自适应webp转换" class="headerlink" title="基于腾讯云EdgeOne的自适应webp转换"></a>基于腾讯云EdgeOne的自适应webp转换</h1><p>EdgeOne是腾讯云提出的边缘计算相关产品，和CloudFlare的小黄云类似，实际上大致等于CDN+安全防护，同时它还提供了边缘函数来提供我们使用，我们可以借助边缘函数实现一些功能，比如说自动将请求的<code>png</code>或<code>jpg</code>图片转换成<code>webp</code>，从而节省流量，加快网站的访问速度，目前暂时是免费的，直接开始白嫖</p><p>但是这个方法目前只适用于你使用自建图床或者专门给图床套了这个EO的情况，如果直接给主站使用的话可能会出现无法访问的情况？本人没有试过，还望大家反馈</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>首先我们进入腾讯云EO的控制台：</p><p><img src="https://img.juniortree.com/202408092009396.png"></p><p>之后进入<strong>站点列表</strong>，选择你想要部署边缘函数的站点，进入到站点设置中：</p><p><img src="https://img.juniortree.com/202408092012580.png"></p><p>进入到左侧边栏：<strong>边缘函数</strong>，选择<strong>函数管理</strong>，在这里我们新建一个函数：</p><p><img src="https://img.juniortree.com/202408092013973.png"></p><p>在这里腾讯云提供了一些常用的预设，我们直接使用就好，这里我们为了自适应转<code>webp</code>，所以使用<strong>图片处理</strong>，选择完成之后点击下一步：</p><p><img src="https://img.juniortree.com/202408092015229.png"></p><p>这里随便取一个名字，你自己以后维护的时候知道是什么函数就行，之后下滑点击<strong>创建并部署</strong></p><p><img src="https://img.juniortree.com/202408092017213.png"></p><p>成功创建函数之后会提示你添加<code>触发规则</code>，这个的意思是边缘函数不是自动执行的，需要有一定的触发条件，比如说绑定到某个域名上，或者碰到什么样的文件类型才会触发，我们现在先<strong>新增触发规则</strong>：</p><p><img src="https://img.juniortree.com/202408092018790.png"></p><p>在这里我绑定了腾讯云COS的回源CDN域名，这里我的<strong>匹配类型</strong>选择<code>HOST</code>，也就是域名或者主机名，后面的值就是我对应图床的域名，确定完成之后点击<strong>确定</strong>，之后<strong>边缘函数</strong>会自动部署</p><p><img src="https://img.juniortree.com/202408092023772.png"></p><p>这个过程中你的EO可能会中断大概五分钟左右，之后如果控制台都显示已部署完成即部署成功</p><h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>那么我们应该如何检验呢，下面以其中一张照片为例</p><p>我首先通过诸如PicGo等软件将图片上传到腾讯云COS中去，之后得到CDN地址为：<a href="https://img.juniortree.com/202408091010252.png">https://img.juniortree.com/202408091010252.png</a></p><p>此时你会发现其文件还是<code>.png</code>后缀，就觉得失败了，但其实不是这样的</p><p>如果按照官方的教程，通过<code>curl</code>指令去查询文件元素，结果发现<code>Content-Type</code>还是<code>png</code>，觉得肯定是失败的</p><p><img src="https://img.juniortree.com/202408092030638.png"></p><p>我之前也被这个问题困扰了很久，也发过工单问过客服，但最终我还是搞明白了</p><p>首先我们需要将这个图片在浏览器中打开：</p><p><img src="https://img.juniortree.com/202408092033225.png"></p><p>按住<code>F12</code>打开开发者模式，选择<code>网络</code>：</p><p><img src="https://img.juniortree.com/202408092034751.png"></p><p>此时再按<code>F5+Ctrl</code>强制刷新缓存，之后再观察右边的文件类型是不是<code>webp</code>，如果是则说明函数使用成功</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose部署随机图API</title>
      <link href="/2024/11/02/Tech/Docker%20Compose%E9%83%A8%E7%BD%B2%E9%9A%8F%E6%9C%BA%E5%9B%BEAPI/"/>
      <url>/2024/11/02/Tech/Docker%20Compose%E9%83%A8%E7%BD%B2%E9%9A%8F%E6%9C%BA%E5%9B%BEAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose部署随机图API"><a href="#Docker-Compose部署随机图API" class="headerlink" title="Docker Compose部署随机图API"></a>Docker Compose部署随机图API</h1><p>平时我们部署博客的时候，为了考虑美观会考虑使用随机图来作为文章的封面，现在有很多大佬愿意提供随机图API，通过API我们可以很方便地部署随机图，不必自己寻找图片，考虑带宽支出</p><p>不过很多时候一些公益API访问速度很慢，其中很多图片并不是我们所想要的，这时候我们就要考虑自建随机图API了，我参考了很多教程，他们中的很多都是基于<strong>宝塔</strong>来实现的，但其实我们不必要安装<strong>宝塔面板</strong>，完全可以在Docker内实现</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>首先我们先建立一个文件夹来方式我们的<code>docker-compose</code>和其他的随机图文件，并且进入该文件夹内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> random-pic &amp;&amp; <span class="built_in">cd</span> random-pic</span><br></pre></td></tr></table></figure><p>之后上传随机图的<code>php</code>文件，在这里有三个版本，其中一个版本我尝试过无法使用（可能是我没有正确使用？</p><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>随机图的基本实现是通过新建一个站点，通过向站点发送请求，站点文件将请求重定向（301）到随机图所在图链，从而实现随机图切换：</p><p><img src="https://img.juniortree.com/202408102228129.png"></p><h3 id="图片准备"><a href="#图片准备" class="headerlink" title="图片准备"></a>图片准备</h3><p>获取到原始图片之后，我建议你对图片继续压缩处理，常见的诸如将图片转换成<code>webp</code>，这能有效减小文件体积，加快用户端的加载速度，如果你使用的是对象存储或者套了CDN的话，这能减小带宽和费用压力</p><p>在这里推荐一下来自<strong>Google</strong>的<strong>Squoosh</strong>，是一个很全能的图片压缩程序，不用下载，直接在浏览器中就可以使用：<a href="https://squoosh.app/">网址</a></p><p><img src="https://img.juniortree.com/202408102234079.png"></p><p>基本上支持了常见图片类型的转换和压缩：</p><p><img src="https://img.juniortree.com/202408102235817.png"></p><h3 id="版本1（不支持桌面与移动端切换"><a href="#版本1（不支持桌面与移动端切换" class="headerlink" title="版本1（不支持桌面与移动端切换"></a>版本1（不支持桌面与移动端切换</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//存放api随机图链接的文件名img.txt</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;img.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从文本获取链接</span></span><br><span class="line"><span class="variable">$pics</span> = [];</span><br><span class="line"><span class="variable">$fs</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$fs</span>))&#123;</span><br><span class="line">    <span class="variable">$line</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$fs</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$line</span>!=<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span> , <span class="number">0</span> , <span class="number">1</span>) != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$pics</span>, <span class="variable">$line</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从数组随机获取链接</span></span><br><span class="line"><span class="comment">// $pic = $pics[array_rand($pics)];</span></span><br><span class="line"><span class="variable">$pic</span> = <span class="variable">$pics</span>[<span class="title function_ invoke__">random_int</span>(<span class="number">0</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$pics</span>) - <span class="number">1</span>)]; <span class="comment"># 真随机</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//返回指定格式</span></span><br><span class="line"><span class="variable">$type</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//JSON返回</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/json&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;pic&#x27;</span>=&gt;<span class="variable">$pic</span>]));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$pic</span>&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时你要在该文件夹内新建一个<code>img.txt</code>文件，用来保存随机图的图链，这里的图链就决定了你图片加载的速度，请务必选择一些速度比较快的图床，这能够有效提高使用体验和加载速度：</p><p><img src="https://img.juniortree.com/202408102236567.png"></p><p>此时你的文件结构应该如下，有<code>img.txt</code>和<code>random.php</code>两个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── img.txt</span><br><span class="line">└── random.php</span><br></pre></td></tr></table></figure><h3 id="版本2（支持桌面与移动端切换"><a href="#版本2（支持桌面与移动端切换" class="headerlink" title="版本2（支持桌面与移动端切换"></a>版本2（支持桌面与移动端切换</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 函数：访客设备</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_mobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]) || </span><br><span class="line">        <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;iPad&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 因为iPad有类似于PC的长宽比，所以我设置为电脑端</span></span><br><span class="line">            <span class="variable">$is_mobile</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ( <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Mobile&#x27;</span>) !== <span class="literal">false</span> </span><br><span class="line">            || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Android&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">            || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Silk/&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">            || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Kindle&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">            || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;BlackBerry&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">            || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Opera Mini&#x27;</span>) !== <span class="literal">false</span></span><br><span class="line">            || <span class="title function_ invoke__">strpos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;Opera Mobi&#x27;</span>) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="variable">$is_mobile</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$is_mobile</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$is_mobile</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 电脑与手机用不同的壁纸</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_mobile</span>())&#123;</span><br><span class="line">   <span class="comment">// 手机壁纸</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&quot;img_mobile.txt&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">// 电脑壁纸</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&quot;img.txt&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//存放api随机图链接的文件名img.txt</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从文本获取链接</span></span><br><span class="line"><span class="variable">$pics</span> = [];</span><br><span class="line"><span class="variable">$fs</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$fs</span>))&#123;</span><br><span class="line">    <span class="variable">$line</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$fs</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$line</span>!=<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span> , <span class="number">0</span> , <span class="number">1</span>) != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$pics</span>, <span class="variable">$line</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从数组随机获取链接</span></span><br><span class="line"><span class="variable">$pic</span> = <span class="variable">$pics</span>[<span class="title function_ invoke__">array_rand</span>(<span class="variable">$pics</span>)];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//返回指定格式</span></span><br><span class="line"><span class="variable">$type</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//JSON返回</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/json&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;pic&#x27;</span>=&gt;<span class="variable">$pic</span>]));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$pic</span>&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种方法，你需要额外添加一个<code>img_mobile.txt</code>文件来放置用于移动端的图片，文件内容同<code>img.txt</code></p><p>此时你的文件结构应该如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── img_mobile.txt</span><br><span class="line">├── img.txt</span><br><span class="line">└── random.php</span><br></pre></td></tr></table></figure><h3 id="版本3（尚未成功"><a href="#版本3（尚未成功" class="headerlink" title="版本3（尚未成功"></a>版本3（尚未成功</h3><p>此版本需要引用<code>Mobile_Detect.php</code>，用于检测用户的设备类型（如手机、平板、桌面等），你需要自行去GitHub上下载源码，并且将它放置到此文件夹内：</p><ol><li><strong>访问 GitHub 仓库</strong>：<ul><li>访问 <a href="https://github.com/serbanghita/Mobile-Detect">Mobile_Detect GitHub 仓库</a>。</li></ul></li><li><strong>下载 ZIP 文件</strong>：<ul><li>在仓库页面上，点击绿色的 “Code” 按钮，然后选择 “Download ZIP” 以下载整个仓库的压缩包。</li></ul></li><li>**解压并找到 <code>Mobile_Detect.php</code>**：<ul><li>解压下载的 ZIP 文件，在解压后的目录中，找到 <code>src/Mobile_Detect.php</code> 文件。</li></ul></li><li><strong>将文件放到正确的位置</strong>：<ul><li>将 <code>Mobile_Detect.php</code> 文件放置到你的项目目录中，例如 <code>/root/random-pic/</code>。</li></ul></li></ol><p>之后<code>random.php</code>的内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数：访客设备</span></span><br><span class="line"><span class="comment"> * 博客园：https://www.cnblogs.com/freephp/p/13979503.html</span></span><br><span class="line"><span class="comment"> * Github: https://github.com/serbanghita/Mobile-Detect</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_mobile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/MobileDetect.php&#x27;</span>); <span class="comment">// 修正文件路径</span></span><br><span class="line">    <span class="variable">$MobileDetect</span> = <span class="keyword">new</span> <span class="title class_">Mobile_Detect</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$MobileDetect</span>-&gt;<span class="title function_ invoke__">isTablet</span>()) &#123;</span><br><span class="line">        <span class="comment">// 平板定义为PC类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$MobileDetect</span>-&gt;<span class="title function_ invoke__">isMobile</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 电脑与手机用不同的壁纸</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="title function_ invoke__">is_mobile</span>() ? <span class="string">&quot;img_mobile.txt&quot;</span> : <span class="string">&quot;img.txt&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 存放api随机图链接的文件名</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从文本获取链接</span></span><br><span class="line"><span class="variable">$pics</span> = [];</span><br><span class="line"><span class="variable">$fs</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$fs</span>))&#123;</span><br><span class="line">    <span class="variable">$line</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$fs</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$line</span> != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$line</span>, <span class="number">0</span>, <span class="number">1</span>) != <span class="string">&#x27;#&#x27;</span>)&#123; <span class="comment">// 修正变量名</span></span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$pics</span>, <span class="variable">$line</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fs</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从数组随机获取链接</span></span><br><span class="line"><span class="variable">$pic</span> = <span class="variable">$pics</span>[<span class="title function_ invoke__">random_int</span>(<span class="number">0</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$pics</span>) - <span class="number">1</span>)]; <span class="comment">// 真随机</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 返回指定格式</span></span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;type&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// JSON 返回</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: application/json&#x27;</span>); <span class="comment">// 修正 Content-type</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;pic&#x27;</span> =&gt; <span class="variable">$pic</span>]));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$pic</span>&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时还是需要添加<code>img_mobile.txt</code>，同<strong>版本2</strong></p><p>此时文件结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── img_mobile.txt</span><br><span class="line">├── img.txt</span><br><span class="line">├── MobileDetect.php</span><br><span class="line">└── random.php</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose部署"><a href="#Docker-Compose部署" class="headerlink" title="Docker Compose部署"></a>Docker Compose部署</h3><p>为了部署这个站点，在这里我们直接使用Docker Compose进行操作：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/random-pic:/usr/share/nginx/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./default.conf:/etc/nginx/conf.d/default.conf</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">random-pic</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">php-fpm</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">php-fpm:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">php:7.4-fpm</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/random-pic:/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>这里为了方便测试我们不占用80端口，而是使用9000端口，之后使用Nginx或者其他工具进行反代即可</p><p>此时不要急着启动容器，我们还需要定制一下<code>Nginx</code>的配置文件：</p><p>此时新建一个<code>default.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span> random.php;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> php-fpm:<span class="number">9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> random.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入后保存，你的文件结构应该是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── default.conf</span><br><span class="line">├── docker-compose.yaml</span><br><span class="line">├── img_mobile.txt</span><br><span class="line">├── img.txt</span><br><span class="line">└── random.php</span><br></pre></td></tr></table></figure><p>之后正式启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>之后访问域名+端口即可看到随机图效果</p><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>个人感觉给随机图域名套上CDN还是有意义的，因为这个严格来说也算个静态网站，如果有CDN缓存的话随机图的切换速度会变快很多</p><blockquote><p>参考文献：<a href="https://blognas.hwb0307.com/linux/docker/1363">Docker系列 WordPress系列 自建随机图API之静态壁纸</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Docker </tag>
            
            <tag> 网站 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker拉取镜像时的疑惑——Layer</title>
      <link href="/2024/11/02/Tech/Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E6%97%B6%E7%9A%84%E7%96%91%E6%83%91%E2%80%94%E2%80%94Layer/"/>
      <url>/2024/11/02/Tech/Docker%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E6%97%B6%E7%9A%84%E7%96%91%E6%83%91%E2%80%94%E2%80%94Layer/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker拉取镜像时的疑惑"><a href="#Docker拉取镜像时的疑惑" class="headerlink" title="Docker拉取镜像时的疑惑"></a>Docker拉取镜像时的疑惑</h1><p>不知道你在拉取镜像的时候会不会有这样的疑惑——我不是只拉取了一个镜像嘛，为什么会出现这么多的东西</p><p><img src="https://img.juniortree.com/202408111104626.png"></p><h2 id="Docker中Layer（层）的概念"><a href="#Docker中Layer（层）的概念" class="headerlink" title="Docker中Layer（层）的概念"></a>Docker中<code>Layer</code>（层）的概念</h2><p>在 Docker 中，镜像（Image）是由多个层（Layer）组成的。这些层就像文件系统的快照，每一层都记录了从上一层开始的一系列变化。我们上面下载时候出现的<code>ec99f8b99825</code>就属于一个层。</p><p>诸如 <code>ec99f8b99825</code> 的字符串是层的唯一标识符（Layer ID）。每一层都有一个独特的 ID，用来识别和引用这一层。拉取镜像时，Docker 会逐层下载这些层，并最终组合成一个完整的镜像。</p><p>使用层对于Docker镜像有以下好处：</p><ol><li><strong>共享和复用</strong>：如果不同的镜像共享相同的基础层，那么这些层只需要下载和存储一次，节省了磁盘空间和下载时间。</li><li><strong>分层构建</strong>：Dockerfile 中的每一条指令（如 <code>RUN</code>, <code>COPY</code>, <code>ADD</code> 等）都会创建一个新的层。这样如果你对 Dockerfile 进行了一些小的修改，Docker 只需要重建修改后的部分，而不需要重新构建整个镜像。</li></ol><h2 id="Layer的建立"><a href="#Layer的建立" class="headerlink" title="Layer的建立"></a><code>Layer</code>的建立</h2><p>当你使用 Dockerfile 创建镜像时，Docker 会按照 Dockerfile 中的每一条指令逐步构建镜像。每一条指令都会生成一个新的层，这个层记录了指令执行后文件系统的变化。最终镜像是由这些层按顺序叠加而成。</p><p>例如你现在有一个<code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y python3</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br></pre></td></tr></table></figure><ul><li>**<code>FROM ubuntu:20.04</code>**：这条指令会拉取一个基础镜像（ubuntu:20.04）。这个镜像已经包含了操作系统的基本文件系统，它是整个镜像的基础层。</li><li>**<code>RUN apt-get update</code>**：这条指令会更新包管理器的索引，并生成一个新的层，记录了更新后的系统状态。</li><li>**<code>RUN apt-get install -y python3</code>**：这条指令安装 Python3，同样会生成一个新的层，记录安装 Python3 后文件系统的变化。</li><li>**<code>COPY . /app</code>**：这条指令将当前目录下的所有文件复制到镜像中的 <code>/app</code> 目录，生成一个新的层，记录这些文件的添加。</li></ul><p>最终生成的镜像由这几层叠加而成，每一层都记录了自上一个层以来的文件系统的变化。</p><p><img src="https://img.juniortree.com/202408111128194.png"></p><h2 id="Cached-layers-（缓存层）"><a href="#Cached-layers-（缓存层）" class="headerlink" title="Cached layers （缓存层）"></a><code>Cached layers</code> （缓存层）</h2><p>当你运行构建时，构建器会尝试重用早期构建中的层。如果图像的某个图层未更改，则构建器会从构建缓存中选取它。如果自上次构建以来某个层发生了更改，则必须重新构建该层以及后续的所有层。</p><p>这样如果你对 Dockerfile 进行了一些小的修改，Docker 只需要重建修改后的部分，而不需要重新构建整个镜像。</p><p><img src="https://img.juniortree.com/202408111136181.png"></p><h2 id="Layer的复用"><a href="#Layer的复用" class="headerlink" title="Layer的复用"></a><code>Layer</code>的复用</h2><p>这个其实算比较常见了，如果你拉取的镜像共用同一<code>Layer</code>，那么它不必重新拉取，而是可以复用。</p><p>每个层都有一个唯一的 ID，用来标识这一层。这个 ID 是通过对层内容进行哈希计算生成的，因此相同内容的层总是会生成相同的 ID。</p><p>当你拉取一个镜像时，Docker 会显示每个层的 ID。例如，诸如 <code>ec99f8b99825</code> 的字符串就是层的 ID。Docker 会逐层检查本地是否已经有该层，如果有就会跳过下载，直接复用本地已有的层。如果没有，则会从镜像仓库下载该层。</p><h2 id="Layer的合并与文件系统"><a href="#Layer的合并与文件系统" class="headerlink" title="Layer的合并与文件系统"></a><code>Layer</code>的合并与文件系统</h2><p>当你拉取一个镜像时，Docker 会从远程仓库逐层下载组成该镜像的所有层。每个层下载完成后，Docker 会显示该层的状态，如 “下载完成”、“拉取完成”等。最终，这些层会在本地组合起来，形成完整的镜像。</p><p>虽然镜像由多个层组成，但在容器内，这些层会合并为一个统一的文件系统。容器看到的文件系统是这些层的叠加结果，每一层的更改会覆盖上层的内容。例如，如果在后面的层中删除或修改了文件，容器内的文件系统会反映这些变化，而不会看到原始的文件。</p><blockquote><p>参考文章：<a href="https://docs.docker.com/build/guide/layers/">Docs Docker | Layer</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL学习笔记</title>
      <link href="/2024/11/02/Note/WSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/02/Note/WSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="WSL学习笔记"><a href="#WSL学习笔记" class="headerlink" title="WSL学习笔记"></a>WSL学习笔记</h1><blockquote><p>适用于 Linux 的 Windows 子系统 (WSL) 是 Windows 的一项功能，可用于在 Windows 计算机上运行 Linux 环境，而无需单独的虚拟机或双引导。 WSL 旨在为希望同时使用 Windows 和 Linux 的开发人员提供无缝高效的体验。</p></blockquote><p>本笔记主要介绍<strong>WSL2</strong>。</p><h2 id="WSL的版本区别"><a href="#WSL的版本区别" class="headerlink" title="WSL的版本区别"></a>WSL的版本区别</h2><p>WSL有两个版本，两个版本不仅在名字上，在技术内核上也有巨大区别:</p><ol><li><strong>WSL1</strong>：是较早的版本，通过将Linux内核调用转换为Windows内核调用，使得Linux应用程序可以在Windows上运行。虽然性能比起传统虚拟机要好，但还是有一些局限性，例如I&#x2F;O性能相对较低。对于<strong>WSL1</strong>你可以理解为将Linux翻译成Windows进行执行，本质上并不运行真正的Linux的系统，因此存在着缺陷。</li><li><strong>WSL2</strong>：是较新的版本，使用了真正的Linux内核，运行在轻量级的虚拟机中。它提供了更好的性能，尤其是在文件I&#x2F;O操作上。同时，WSL 2能够更好地兼容Linux应用程序，几乎所有在Linux上能运行的应用程序都可以在WSL 2上运行。实际上整个Windows和Linux都运行在基于<strong>Hyperv</strong>的虚拟化平台上，本质上是一个大虚拟机，你可以理解为<strong>WSL2</strong>上运行的是真正的Linux系统，具有完整Linux内核的系统。</li></ol><table><thead><tr><th>功能</th><th>WSL 1</th><th>WSL 2</th></tr></thead><tbody><tr><td>Windows 和 Linux 之间的集成</td><td>✅</td><td>✅</td></tr><tr><td>启动时间短</td><td>✅</td><td>✅</td></tr><tr><td>与传统虚拟机相比，占用的资源量少</td><td>✅</td><td>✅</td></tr><tr><td>可以与当前版本的 VMware 和 VirtualBox 一起运行</td><td>✅</td><td>❌</td></tr><tr><td>托管 VM</td><td>❌</td><td>✅</td></tr><tr><td>完整的 Linux 内核</td><td>❌</td><td>✅</td></tr><tr><td>完全的系统调用兼容性</td><td>❌</td><td>✅</td></tr><tr><td>跨 OS 文件系统的性能</td><td>✅</td><td>❌</td></tr><tr><td>systemd 支持</td><td>❌</td><td>✅</td></tr><tr><td>IPv6 支持</td><td>✅</td><td>✅</td></tr></tbody></table><h2 id="WSL2使用的前置条件"><a href="#WSL2使用的前置条件" class="headerlink" title="WSL2使用的前置条件"></a>WSL2使用的前置条件</h2><h3 id="CPU虚拟化"><a href="#CPU虚拟化" class="headerlink" title="CPU虚拟化"></a>CPU虚拟化</h3><p><img src="https://img.juniortree.com/202408122030069.png"></p><h3 id="Windows功能"><a href="#Windows功能" class="headerlink" title="Windows功能"></a>Windows功能</h3><p>其中有两个功能：</p><ol><li>虚拟化平台</li><li>适用于Linux的Windows子系统</li></ol><p><img src="https://img.juniortree.com/202408122032849.png"></p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>直接使用<code>powershell</code>进行安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">--web-download</span></span><br></pre></td></tr></table></figure><p>其中<code>web-download</code>是其中的一个选项，此选项会从微软的在线服务器下载并安装最新的WSL版本、Linux内核和相关组件，而不依赖于你当前Windows系统中的Windows Update或预装包。这个选项非常有用，尤其是在你希望确保安装最新版本的WSL时，或者当你的系统配置限制了使用本地或离线安装时。</p><p>如果在国内环境的话建议使用，减少了因为网络问题而无法下载的问题</p><p>此时下载完成之后会显示：</p><p><img src="https://img.juniortree.com/202408122039239.png"></p><p>之后安装要求输入<code>root</code>用户名与密码：</p><p><img src="https://img.juniortree.com/202408122040215.png"></p><p>安装完成之后会自动进入终端：</p><p><img src="https://img.juniortree.com/202408122041028.png"></p><p>即默认<strong>WSL</strong>安装完成</p><h3 id="其他版本WSL安装"><a href="#其他版本WSL安装" class="headerlink" title="其他版本WSL安装"></a>其他版本WSL安装</h3><p>目前<strong>WSL2</strong>已经支持几乎所有的Linux发行版，我们可以通过以下指令进行查看：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--list</span> <span class="literal">--online</span></span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122054934.png"></p><p>常见的官方支持的发行版有：</p><table><thead><tr><th>NAME</th><th>FRIENDLY NAME</th></tr></thead><tbody><tr><td>Ubuntu</td><td>Ubuntu</td></tr><tr><td>Debian</td><td>Debian GNU&#x2F;Linux</td></tr><tr><td>kali-linux</td><td>Kali Linux Rolling</td></tr><tr><td>Ubuntu-18.04</td><td>Ubuntu 18.04 LTS</td></tr><tr><td>Ubuntu-20.04</td><td>Ubuntu 20.04 LTS</td></tr><tr><td>Ubuntu-22.04</td><td>Ubuntu 22.04 LTS</td></tr><tr><td>Ubuntu-24.04</td><td>Ubuntu 24.04 LTS</td></tr><tr><td>OracleLinux_7_9</td><td>Oracle Linux 7.9</td></tr><tr><td>OracleLinux_8_7</td><td>Oracle Linux 8.7</td></tr><tr><td>OracleLinux_9_1</td><td>Oracle Linux 9.1</td></tr><tr><td>openSUSE-Leap-15.6</td><td>openSUSE Leap 15.6</td></tr><tr><td>SUSE-Linux-Enterprise-15-SP5</td><td>SUSE Linux Enterprise 15 SP5</td></tr><tr><td>SUSE-Linux-Enterprise-Server-15-SP6</td><td>SUSE Linux Enterprise Server 15 SP6</td></tr><tr><td>openSUSE-Tumbleweed</td><td>openSUSE Tumbleweed</td></tr></tbody></table><p>其他一些发行版可以通过其他方式进行安装，可以通过下载root文件手动安装，本文在这里不做介绍</p><p>这里我们安装<strong>Kali-linux</strong>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> kali<span class="literal">-linux</span> <span class="literal">--web-download</span></span><br></pre></td></tr></table></figure><p>其安装过程与安装<strong>Ubuntu</strong>类似</p><p><img src="https://img.juniortree.com/202408122059543.png"></p><h2 id="WSL的基本指令"><a href="#WSL的基本指令" class="headerlink" title="WSL的基本指令"></a>WSL的基本指令</h2><p>1.<strong>系统镜像管理</strong>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--list</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p>这里显示了<strong>WSL</strong>中所有的子系统以及运行状态</p><p><img src="https://img.juniortree.com/202408122102851.png"></p><p>其中<code>*</code>代表目前<strong>WSL</strong>中默认启动的系统</p><ol start="2"><li><strong>默认系统的切换</strong>：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p>这里的<code>NAME</code>指的是系统的名字，请务必注意区分大小写，比如说我现在切换为<code>Ubuntu</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default</span> Ubuntu</span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122110765.png"></p><p>之后我们再执行1中的命令：</p><p><img src="https://img.juniortree.com/202408122111478.png"></p><p>此时默认系统以及被切换为<code>Ubuntu</code></p><ol start="3"><li><strong>系统的启动</strong>：</li></ol><p><strong>PowerShell</strong>右上箭头，后打开后选中你想要运行的系统：</p><p><img src="https://img.juniortree.com/202408122115589.png"></p><p>启动速度很快，几乎秒开（看人缘 偶尔快）：</p><p><img src="https://img.juniortree.com/202408122117503.png"></p><p>如果你想要通过命令行启动系统，可以使用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">-d</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122119098.png"></p><ol start="4"><li><strong>系统的关闭</strong>：</li></ol><ul><li>直接关闭终端</li><li>使用<code>exit</code>，出现<code>logout</code>即为退出登录成功</li></ul><p><img src="https://img.juniortree.com/202408122122164.png"></p><ol start="5"><li><strong>系统的删除</strong>：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--unregister</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122129439.png"></p><ol start="6"><li><strong>镜像的导出</strong>：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--export</span> &lt;NAME&gt; &lt;EXPORT NAME&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122132188.png"></p><p>之后再对应文件夹内即可看到<code>tar</code>文件，进入文件后不难看出其包含了基本的Linux文件结构</p><p><img src="https://img.juniortree.com/202408122134471.png"></p><p>如果你想要切换其他的压缩格式，比如说<code>7z</code>、<code>rar</code>等等，你可以更改文件后缀名，比如说<code>Ubuntu.7z</code>等等</p><ol start="7"><li><strong>镜像的导入</strong>：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--import</span> &lt;NAME&gt; &lt;导入路径&gt; &lt;导出镜像路径&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122141129.png"></p><p>之后进入导入路径查看：</p><p><img src="https://img.juniortree.com/202408122144104.png"></p><p>这更加证实了<strong>WSL2</strong>是基于<strong>Hyperv</strong>的既定事实</p><h2 id="关于子系统的一些"><a href="#关于子系统的一些" class="headerlink" title="关于子系统的一些"></a>关于子系统的一些</h2><ol><li><strong>磁盘挂载</strong>：</li></ol><p><img src="https://img.juniortree.com/202408122148937.png"></p><p><strong>Windows</strong>下的C盘与D盘是作为磁盘直接挂载在<strong>WSL</strong>下的，这意味着两个文件是相通的</p><p>但由于<strong>WSL</strong>的<strong>I&#x2F;O</strong>性能很弱，如果你需要进行大量文件拷贝的操作的话，可以采取内网传输的方法</p><ol start="2"><li><strong>包管理器</strong>：</li></ol><p>之前说了<strong>WSL</strong>中运行的是完整Linux，因此我们可以直接使用包管理器进行安装，不过需要注意的是，使用前需要先进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p>之后再进行安装，不然有可能会出错</p><ol start="3"><li><strong>显卡直连</strong>：</li></ol><p><strong>WSL</strong>本身支持显卡直连，你需要安装以下步骤：</p><ul><li><p>你需要安装适用于 Windows 的最新 NVIDIA 驱动程序，确保其支持 CUDA 和 WSL 2。</p></li><li><p>安装<strong>CUDA</strong>工具包：</p><ul><li><strong>添加 CUDA 存储库</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7FA2AF80</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure><ul><li><strong>安装 CUDA 工具包</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure></li><li><p><strong>安装驱动</strong>：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install nvidia-utils-535</span><br></pre></td></tr></table></figure><ul><li><strong>验证</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="https://img.juniortree.com/202408122231999.png"></p><ol start="4"><li><strong>GUI显示</strong>：</li></ol><p>这个对我来说没啥用意义，不写了。。。</p><blockquote><p>参考文章：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/">适用于 Linux 的 Windows 子系统文档</a><br><a href="https://www.bilibili.com/video/BV1tW42197za">超详细的WSL教程：Windows上的Linux子系统</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下搭建求生之路2专用原版和插件服务器</title>
      <link href="/2024/11/02/Tech/Windows%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF2%E4%B8%93%E7%94%A8%E5%8E%9F%E7%89%88%E5%92%8C%E6%8F%92%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/11/02/Tech/Windows%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF2%E4%B8%93%E7%94%A8%E5%8E%9F%E7%89%88%E5%92%8C%E6%8F%92%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows下搭建求生之路2专用原版和插件服务器"><a href="#Windows下搭建求生之路2专用原版和插件服务器" class="headerlink" title="Windows下搭建求生之路2专用原版和插件服务器"></a>Windows下搭建求生之路2专用原版和插件服务器</h1><p>寒假期间和同学高强度打求生，但无奈游戏内本地服务器联机延时过高，平均时延在100ms往上，而且无法加插件实现多人房，因此琢磨了一下如何自己搭建求生之路2专用服务器。无奈网上大多教程是基于Linux的，部分教程也较老，我自己也踩了很多坑，因此写下这篇博客来分享和帮助大家避坑。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>本教程基于Windows11家庭版，可以运行到所有Windows版本。</p><h2 id="原版服务器安装"><a href="#原版服务器安装" class="headerlink" title="原版服务器安装"></a>原版服务器安装</h2><p>我们需要先下载<a href="https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip">SteamCMD</a></p><p><img src="https://s2.loli.net/2024/02/07/hKHoCjPZ7Y1TztJ.png"></p><p>解压获得SteamCMD文件。<strong>注意：文件目录不要带有中文</strong></p><p><del>从文件我们可以看出SteamCMD是一个很古早的项目（bushi</del></p><p><img src="https://s2.loli.net/2024/02/07/QKSncm6pkorFVi3.png"></p><p>之后我们需要创建一个<code>.bat</code>文件来启动安装程序，我们先新建一个文本文件</p><p>xxxxxxxxxx #include &lt;stdio.h&gt;​&#x2F;&#x2F; 交换数组中两个元素的值void swap(int *a, int *b) {    int temp &#x3D; *a;    *a &#x3D; *b;    *b &#x3D; temp;}​&#x2F;&#x2F; 递归函数，用于逆置数组元素void reverse_array(int arr[], int start, int end) {    &#x2F;&#x2F; 当起始位置大于等于结束位置时，说明逆置完成    if (start &gt;&#x3D; end)        return;​    &#x2F;&#x2F; 交换起始位置和结束位置的元素    swap(&amp;arr[start], &amp;arr[end]);​    &#x2F;&#x2F; 递归处理剩余的子数组    reverse_array(arr, start + 1, end - 1);}​int main() {    int arr[] &#x3D; {1, 2, 3, 4, 5};    int n &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);​    printf(“原数组：”);    for (int i &#x3D; 0; i &lt; n; ++i) {        printf(“%d “, arr[i]);    }    printf(“\n”);​    &#x2F;&#x2F; 调用递归函数逆置数组元素    reverse_array(arr, 0, n - 1);​    printf(“逆置后的数组：”);    for (int i &#x3D; 0; i &lt; n; ++i) {        printf(“%d “, arr[i]);    }    printf(“\n”);​    return 0;}c</p><p>然后将下面的代码复制进去</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> steamcmd.exe +login anonymous +force_install_dir l4d2_sv +app_update <span class="number">222860</span> validate +quit</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/07/LqazbojRPUTlmDW.png"></p><p>点击左上角<code>文件</code>，点击<code>另存为</code></p><p><img src="https://s2.loli.net/2024/02/07/8fDyPw7LkgxBui2.png"></p><p>保存类型选择<code>所有文件（*.*)</code>，文件名改为<code>.bat</code>，最后点击保存</p><p><img src="https://s2.loli.net/2024/02/07/RXhdGabvlAVIEp5.png"></p><p>然后再回到刚开始我们存放SteamCMD的那个文件夹，会发现多出了一个文件，删除文本文件</p><p><img src="https://s2.loli.net/2024/02/07/8FBofTDPKvHnXgG.png"></p><p>现在双击运行红框内文件</p><p><img src="https://s2.loli.net/2024/02/07/QRxqg3cmJIu682i.png"></p><p>运行成功后会弹出一个黑漆漆的窗口，此时服务器配置文件开始下载，下载大小在8G左右，如果你有科学上网环境的话建议开启，不然可能会出现卡顿</p><p>当安装完成之后窗口会自动关闭，此时我们打开文件夹可以看到多出了很多文件</p><p><img src="https://s2.loli.net/2024/02/07/4FgRPEBCquTQOed.png"></p><p>此时打开<code>l4d2_sv</code>文件夹，找到下面的<code>srcds</code>可执行文件，双击打开</p><p><img src="https://s2.loli.net/2024/02/07/aKoGwVHU5uqxLX4.png"></p><p>由于我们家用电脑没有公网IP，因此我们在这里先将网络改为<code>局域网</code>再用其他的内网穿透软件实现联机功能，RCON密码可以随便写，我这里以<code>666</code>为例</p><p><img src="https://s2.loli.net/2024/02/07/edLsz5hUm1l6QNS.png"></p><p>点击<code>开始服务器</code>之后等待片刻即可进入</p><p><img src="https://s2.loli.net/2024/02/07/Hbfhj6VgztnJUx2.png"></p><p>之后玩家可以通过内网穿透后的IP进入到服务器中，这里以<code>樱花内网穿透</code>为例</p><p><img src="https://s2.loli.net/2024/02/07/1AZaRytVKWHe6iL.png"></p><p>之后打开求生之路游戏客户端，选择<code>选项</code>–&gt;<code>键盘/鼠标</code></p><p><img src="https://s2.loli.net/2024/02/07/uHcVBKTt7svLbRd.png"></p><p>之后选择<code>允许使用开发者控制台</code>使其变为<code>已启用</code></p><p><img src="https://s2.loli.net/2024/02/07/YJh6lyVbTFar1xU.png"></p><p>返回主界面，按键盘上的<code>~</code>进入控制台</p><p><img src="https://s2.loli.net/2024/02/07/FywcJfiHm19G2zj.png"></p><p>输入代码<code>connect 内网穿透后的地址</code></p><p><img src="https://s2.loli.net/2024/02/07/Y5WMXkAlvs8a1yG.png"></p><p>到此原版服务器的搭建完成</p><h2 id="插件服务器安装"><a href="#插件服务器安装" class="headerlink" title="插件服务器安装"></a>插件服务器安装</h2><p>插件服务器的安装要在原版服务器的基础上，插件我们采用大神的豆瓣插件整合包，这里我给出了云盘资源：<a href="https://alist.aicnal.online/Share/Software">AList网盘</a></p><p><img src="https://s2.loli.net/2024/02/07/ethkxbj3uVg9Y5M.png"></p><p>我们直接将它下载下来，解压得到以下文件</p><p><img src="https://s2.loli.net/2024/02/07/6ZqxuPAamYlostU.png"></p><p>现在我们将文件全部复制到服务器的<code>l4d2_sv</code>中去</p><p><img src="https://s2.loli.net/2024/02/07/aIg6CuljyiqcwXE.png"></p><p>双击运行<code>JSGME.exe</code>，打开插件安装程序</p><p><img src="https://s2.loli.net/2024/02/07/dES6KtY2mjUNHzF.png"></p><p>此时选择自己需要的插件进行安装即可，安装完成之后重启服务器来重载插件，此时重新启动服务器后我们要关闭<code>安全（Valve反作弊）</code></p><p><img src="https://s2.loli.net/2024/02/10/T2nXOjhU3QdMKay.png"></p><p>此时再打开服务器即为插件服</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>本文简单介绍了求生之路2专用服务器的搭建过程，其中还涉及大量的技术点由于篇幅设置还未涉及，还望多多指教。至于专用服务器的优点大家可以参考Steam社区的这篇文章：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2595030698&searchtext=%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8">为什么不要使用本地服务器游玩</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想——晚风</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E9%9A%8F%E6%83%B3%E2%80%94%E2%80%94%E6%99%9A%E9%A3%8E/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E9%9A%8F%E6%83%B3%E2%80%94%E2%80%94%E6%99%9A%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<p>“晚风依旧很温柔”</p><iframe type="music" frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1848190450&auto=1&height=66"></iframe><p><img src="https://img.juniortree.com/202408141944258.HEIC"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在博客中添加Live图</title>
      <link href="/2024/11/02/Tech/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0Live%E5%9B%BE/"/>
      <url>/2024/11/02/Tech/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0Live%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="为博客添加Live图"><a href="#为博客添加Live图" class="headerlink" title="为博客添加Live图"></a>为博客添加Live图</h1><div style="width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;"     data-live-photo     data-photo-src="https://img.juniortree.com/202408151005027.JPEG"     data-video-src="https://img.juniortree.com/202408151005487.MOV"></div></br><div style="width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;"     data-live-photo     data-photo-src="https://img.juniortree.com/202408151525591.JPEG"     data-video-src="https://img.juniortree.com/202408152105218.MOV"></div></br><p>Apple提供了很生动的Live实况图，在实际展示的过程中非常生动形象，在撰写博客的过程中，我自己也尝试将博客中嵌入实况图片</p><p>其实Apple提供的iCloud网页版为我们提供了很好的示例，为了实现本文开始的效果，我们也将使用Apple官方所提供的方法</p><h2 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h2><p>在了解如何实现Live实况图效果的时候，我们需要了解实况图的组成</p><p>实况图本身是由一张图片和视频文件组成，我建议你从iCloud官网或者使用数据线导出：</p><h3 id="iCould下载"><a href="#iCould下载" class="headerlink" title="iCould下载"></a>iCould下载</h3><p><img src="https://img.juniortree.com/202408152117995.png"></p><h3 id="数据线导出"><a href="#数据线导出" class="headerlink" title="数据线导出"></a>数据线导出</h3><p>同时可以看到存在 <code>JPG</code>、<code>PNG</code>、<code>HEIC</code>等多种图片文件和 <code>MOV</code>等视频文件，官方对图片文件没有具体要求，不过有博主推荐都转换成 <code>JPG</code>文件，可以都尝试一下</p><p><img src="https://img.juniortree.com/202408152118328.png"></p><p><img src="https://img.juniortree.com/202408152119920.png"></p><h3 id="上传图床"><a href="#上传图床" class="headerlink" title="上传图床"></a>上传图床</h3><p>我平时写MD喜欢使用图床，我建议你将图片和视频都上传图床，从而分别获得图片和视频图床链接</p><h2 id="MD插入"><a href="#MD插入" class="headerlink" title="MD插入"></a>MD插入</h2><p>MD文档的插入分为两部分：</p><ul><li><code>&lt;script&gt;</code>标签的插入</li><li>嵌入网页的插入<br>在这其中，请将 <code>data-photo-src</code>和 <code>data-video-src</code>替换成你上传图床的图片和视频链接</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-live-photo</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-photo-src</span>=<span class="string">&quot;https://...&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-video-src</span>=<span class="string">&quot;https://...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然如果你在博客内可以设置代码注入，可以将 <code>&lt;script&gt;</code>代码插入到文章页当中去，那么可以不要在MD文档中插入</p><p>以下是一个MD文档示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Live Photo 示例</span></span><br><span class="line"></span><br><span class="line">以下是一个 Live Photo 的嵌入示例：</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">     <span class="attr">data-live-photo</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">     <span class="attr">data-photo-src</span>=<span class="string">&quot;https://...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">     <span class="attr">data-video-src</span>=<span class="string">&quot;https://...&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><ol><li><strong>图床跨域访问</strong>：<br>如果你是自建图床，请务必开启<strong>跨域访问</strong>，而且如果你的图床使用了CDN回源，请务必配置CDN的<strong>跨域访问</strong>，这个问题困扰了我很久，如果你按照上述配置出现以下情形：<br><img src="https://img.juniortree.com/202408152140537.png"><br>建议按住 <code>F12</code>进入浏览器控制台，看看是不是出现报错，如果出现这种 <code>blocked by CORS</code>基本上就是跨域访问没跑了<br><img src="https://img.juniortree.com/202408152141712.png"></li><li><strong>浏览器支持</strong>：<br>Apple提供的方案并不支持所有的浏览器，有些浏览器可能不能完全兼容，建议使用Chrome浏览器进行调试，并且停用缓存</li><li><strong><code>&lt;iframe&gt;</code>标签实现</strong>：<br>有老哥通过<code>&lt;iframe&gt;</code>标签实现了一样的效果，以下是我通过GPT写的一个demo，未尝试过：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Live Photo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.apple-livephotoskit.com/lpk/1/livephotoskit.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.live-photo-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            aspect-ratio: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;live-photo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;live-photo-container&quot;</span> <span class="attr">data-live-photo</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取 URL 参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> urlParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> photoSrc = urlParams.<span class="title function_">get</span>(<span class="string">&#x27;photo&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> videoSrc = urlParams.<span class="title function_">get</span>(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动态设置图片和视频链接</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> livePhotoElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;live-photo&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        livePhotoElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-photo-src&#x27;</span>, photoSrc);</span></span><br><span class="line"><span class="language-javascript">        livePhotoElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-video-src&#x27;</span>, videoSrc);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Live Photo 示例</span></span><br><span class="line"></span><br><span class="line">以下是一个通过 <span class="code">`&lt;iframe&gt;`</span> 嵌入的 Live Photo 示例：</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;live-photo-iframe.html?photo=https://...&amp;video=https://...&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">height</span>=<span class="string">&quot;320&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">allowfullscreen</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样的好处是我们不必在每次写作后维护这么多的html标签，你需要将第一个文件上传到网站的某个目录下，然后在标签中调用</p><blockquote><p>参考文章：<a href="https://developer.apple.com/documentation/livephotoskitjs">LivePhotosKit JS</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自建PT刷流盒子</title>
      <link href="/2024/11/02/Tech/%E5%A6%82%E4%BD%95%E8%87%AA%E5%BB%BAPT%E5%88%B7%E6%B5%81%E7%9B%92%E5%AD%90/"/>
      <url>/2024/11/02/Tech/%E5%A6%82%E4%BD%95%E8%87%AA%E5%BB%BAPT%E5%88%B7%E6%B5%81%E7%9B%92%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="如何自建PT刷流盒子"><a href="#如何自建PT刷流盒子" class="headerlink" title="如何自建PT刷流盒子"></a>如何自建PT刷流盒子</h1><h2 id="选择机器"><a href="#选择机器" class="headerlink" title="选择机器"></a>选择机器</h2><p>为了刷流我们最好选择大带宽、大容量的服务器，在这里我们简称大盘鸡<br>在这里为了方便演示我就拿Digital Ocean的一台服务器进行搭建，如果你要正式刷流了还是买个硬盘容量大点的</p><p><img src="https://img.juniortree.com/202408161941123.png"></p><p>操作系统可以用Centos或者Debian系的都行，这个不影响</p><p><img src="https://img.juniortree.com/202408161945252.png"></p><p>填写密码，请务必牢记，这是后续连接服务器的唯一凭证</p><p><img src="https://img.juniortree.com/202408161942997.png"></p><p>如果服务器提供IPv6地址的话建议开启（你懂的 一般来说服务器厂商都会免费提供IPv6地址 具体流量和带宽资费就不知道了 Digital Ocean免费提供</p><p><img src="https://img.juniortree.com/202408161946508.png"></p><p>之后即创建完成</p><p><img src="https://img.juniortree.com/202408161947296.png"></p><h2 id="登录到服务器"><a href="#登录到服务器" class="headerlink" title="登录到服务器"></a>登录到服务器</h2><p>在这里我使用<code>Xshell</code>连接服务器</p><p>添加一个新服务器：</p><p><img src="https://img.juniortree.com/202408161955591.png"></p><p><code>Name</code>这里填你自己想给服务器命名的名字，<code>Host</code>这里填服务器厂商给你的服务器分配的IP地址，确认完毕后点击<code>OK</code></p><p><img src="https://img.juniortree.com/202408161957161.png"></p><p>之后选择，连接即可</p><p><img src="https://img.juniortree.com/202408161959275.png"></p><p>点击<code>Accept and Save</code>：</p><p><img src="https://img.juniortree.com/202408162000002.png"></p><p>我们默认使用<code>root</code>账户进行登录：</p><p><img src="https://img.juniortree.com/202408162001783.png"></p><p>输入你之前设定的密码，点击<code>OK</code>进行登录：</p><p><img src="https://img.juniortree.com/202408162002067.png"></p><p>此时登录完成：</p><p><img src="https://img.juniortree.com/202408162004628.png"></p><h2 id="安装qBittorrent-nox"><a href="#安装qBittorrent-nox" class="headerlink" title="安装qBittorrent-nox"></a>安装qBittorrent-nox</h2><p><strong>qBittorrent-nox</strong>是<strong>qBittorrent</strong>的服务器版，用户通过WebUI进行访问（hhh 是不是和平时NAS上的qb一样了</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>在Ubuntu&#x2F;Debian上安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install qbittorrent-nox -y</span><br></pre></td></tr></table></figure><p>在CentOS&#x2F;RHEL上安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install epel-release -y</span><br><span class="line"><span class="built_in">sudo</span> yum install qbittorrent-nox -y</span><br></pre></td></tr></table></figure><h3 id="2-配置qBittorrent-nox"><a href="#2-配置qBittorrent-nox" class="headerlink" title="2. 配置qBittorrent-nox"></a>2. 配置qBittorrent-nox</h3><p>安装完成后，运行以下命令启动qBittorrent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox</span><br></pre></td></tr></table></figure><p>第一次启动会弹出法律声明，同意确定按<code>y</code>回车即可：</p><p><img src="https://img.juniortree.com/202408162014249.png"></p><p>之后会弹出用户名和密码，用户名默认就是<code>admin</code>，至于密码qb后期版本更新之后变成随机的了：</p><p><img src="https://img.juniortree.com/202408162018058.png"></p><p>之后通过<code>http://IP:8080</code>进行访问，进入WebUI（是不是很熟悉hhhh 此时请务必重新设置密码，随机密码每次开启都会重置</p><p><img src="https://img.juniortree.com/202408162022783.png"></p><p>此时回到<code>Xshell</code>，按住<code>Ctrl + C</code>，先暂时退出服务器的qbittorrent-nox进程</p><p>之后用下面的指令启用后台运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游记——贵州铜仁一日游</title>
      <link href="/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%B8%B8%E8%AE%B0%E2%80%94%E2%80%94%E8%B4%B5%E5%B7%9E%E9%93%9C%E4%BB%81%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
      <url>/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%B8%B8%E8%AE%B0%E2%80%94%E2%80%94%E8%B4%B5%E5%B7%9E%E9%93%9C%E4%BB%81%E4%B8%80%E6%97%A5%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="贵州铜仁一日游"><a href="#贵州铜仁一日游" class="headerlink" title="贵州铜仁一日游"></a>贵州铜仁一日游</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暑假有空，自驾从湖南出发，前往<strong>苗王城</strong>和<strong>大明边城</strong>。不巧的是高速路上突然下起了大雨，还挺吓人的</p><p>这里刚刚经过贵州边界hhh 之前也是跑这条高速去的梵净山</p><div style="width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;"     data-live-photo     data-photo-src="https://img.juniortree.com/202408162215396.JPEG"     data-video-src="https://img.juniortree.com/202408162216379.MOV"></div><h2 id="苗王城"><a href="#苗王城" class="headerlink" title="苗王城"></a>苗王城</h2><p>刚开始去<strong>苗王城</strong>的时候没找对地方，只在外面的茶园就停下来了，一度让我们以为<strong>苗王城</strong>就只是一个茶园</p><p>茶园很大，尤其是很整齐，来拍照的游客自然也不在少数，此时天刚好要下雨，变得雾蒙蒙远处犹有仙气</p><p><img src="https://img.juniortree.com/202408162222295.HEIC"></p><p><img src="https://img.juniortree.com/202408162221126.webp"></p><p>沿着导航给的那条路继续往里面走，便可以看到<strong>苗王城</strong>的“庐山真面目”，这里便是大门</p><p><img src="https://img.juniortree.com/202408162228690.webp"></p><p>进入<strong>苗王城</strong>需要买票，售票处在大门的右侧，买了票之后便可正式进入</p><p><img src="https://img.juniortree.com/202408162236588.webp"></p><p>这条路的右边有一个广场，有一个类似于“鼓”的石碑，上面写了“<strong>中国苗王城</strong>”，没想到这几个字居然是欧阳中石老师写的</p><p><img src="https://img.juniortree.com/202408162237387.webp"></p><p>走进城门，左侧有人在打鼓欢迎游客，十分热情</p><p><img src="https://img.juniortree.com/202408162239258.webp"></p><p>古城墙，绿松树，“苗王城”这几个字更具韵味</p><p><img src="https://img.juniortree.com/202408162241814.webp"></p><p>穿过城门进入广场，大柱子，长廊，游客络绎不绝</p><p><img src="https://img.juniortree.com/202408162243009.HEIC"></p><p><img src="https://img.juniortree.com/202408162244726.HEIC"></p><p>苗寨比较具有风韵的应该就是小巷，感觉和湖南有些地方的古城落有点像</p><p>“曲径通幽处，禅房花木深”，这里没有所谓“禅房”，只有一间间的苗族小屋</p><p><img src="https://img.juniortree.com/202408162246980.webp"></p><p>我们在巷子里面穿行的时候，碰到了一个游客大哥，和我们说苗寨的酒特别香哈哈哈哈，还问我们有没有开车，劝我们去尝一尝，不过因为我们是自驾游出来的，就不得不放弃了这次的尝试机会</p><p><img src="https://img.juniortree.com/202408162253943.webp"></p><p><img src="https://img.juniortree.com/202408162254908.webp"></p><p>苗语也很有意思，一路上导游教游客用苗语做回答，路上也有很多像这种“苗译汉译英”</p><p><img src="https://img.juniortree.com/202408162255246.webp"></p><p><strong>苗王府</strong>算得上这次参观的重头戏，其整体的规格制度有点像北方皇宫的建筑特色，不过也融合了当地苗族建筑的艺术特点，感觉挺有意思</p><p><img src="https://img.juniortree.com/202408162259457.HEIC"></p><p><img src="https://img.juniortree.com/202408162300131.HEIC"></p><p><strong>苗王城</strong>依水而建，沿着小路可以一直走到码头，水是翠绿色的</p><p><img src="https://img.juniortree.com/202408162304521.HEIC"></p><h2 id="大明边城"><a href="#大明边城" class="headerlink" title="大明边城"></a>大明边城</h2><p>在浏览完<strong>苗王城</strong>之后我们继续驱车前往<strong>大明边城</strong>。<strong>大明边城</strong>离铜仁市区较近，我们没有选择走高速，而是选择走国道前往，路上下起了倾盆大雨（还是有点吓人</p><p><img src="https://img.juniortree.com/202408171001123.HEIC"></p><p><img src="https://img.juniortree.com/202408171003101.HEIC"></p><p>之后在城内找了一个小店吃了酸汤鱼，也算是贵州特色，酸汤鱼的鱼肉不是一片一片的，而是一坨一坨的，里面还煮了很多西红柿，豆芽菜还有豆腐之类的</p><p><img src="https://img.juniortree.com/202408171005247.png"></p><p>吃饭旁边有一个小阳台，如果不下雨的话在旁边吃饭很有氛围</p><div style="width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;"     data-live-photo     data-photo-src="https://img.juniortree.com/202408171010935.JPEG"     data-video-src="https://img.juniortree.com/202408171010436.MOV"></div></br><div style="width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;"     data-live-photo     data-photo-src="https://img.juniortree.com/202408171011850.JPEG"     data-video-src="https://img.juniortree.com/202408171011701.MOV"></div><p>这边风景独好~</p><p><img src="https://img.juniortree.com/202408171017777.HEIC"></p><p><img src="https://img.juniortree.com/202408171018938.HEIC"></p><p>回去路上还偶遇农夫山泉灌装厂hhhh</p><div style="width: 80%; max-width: 640px; aspect-ratio: 1; margin: auto;"     data-live-photo     data-photo-src="https://img.juniortree.com/202408171020602.JPEG"     data-video-src="https://img.juniortree.com/202408171020266.MOV"></div><p>以后有机会可以更深入地自驾贵州，还挺好玩的</p>]]></content>
      
      
      <categories>
          
          <category> 旅行日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学——新生</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%BC%80%E5%AD%A6%E2%80%94%E2%80%94%E6%96%B0%E7%94%9F/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%BC%80%E5%AD%A6%E2%80%94%E2%80%94%E6%96%B0%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="开学"><a href="#开学" class="headerlink" title="开学"></a>开学</h1><p>开学第一周，由于降转的原因有很多选课需要自己去找老师取消，跑了很多次本部，我一直很喜欢本部前面大楼的爬山虎，春夏很好看，很有氛围，秋冬开始枯萎就有点难看了</p><p><img src="https://img.juniortree.com/C70B1349-3F75-4D6A-BD1E-203EB623B2F6_1_105_c.jpeg"></p><p>本部的咖啡厅里面的夹心浏览面包很好吃，只不过价格有点小贵，大概12块</p><p>很有意思的是生科和物理系只隔了一条马路（确实幽默 算是心心念念了</p><p><img src="https://img.juniortree.com/D0AA19DD-AF1F-476A-B947-71FA96A47D0B_1_105_c.jpeg"></p><p>今天还开了生科院新生开学典礼，挺无聊的说实话，开班会前艺术楼内的光影很漂亮</p><p><img src="https://img.juniortree.com/4A6F0AC0-1D8A-407B-AF08-6A03977E182E_1_102_o.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
            <tag> 随想 </tag>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanger 双脱氧链终止法</title>
      <link href="/2024/11/02/Note/Sanger%20%E5%8F%8C%E8%84%B1%E6%B0%A7%E9%93%BE%E7%BB%88%E6%AD%A2%E6%B3%95/"/>
      <url>/2024/11/02/Note/Sanger%20%E5%8F%8C%E8%84%B1%E6%B0%A7%E9%93%BE%E7%BB%88%E6%AD%A2%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Sanger-双脱氧链终止法"><a href="#Sanger-双脱氧链终止法" class="headerlink" title="Sanger 双脱氧链终止法"></a>Sanger 双脱氧链终止法</h1><blockquote><p><strong>双脱氧链终止法</strong>（英语：dideoxyribonucleotide ［簡稱 dideoxy］ chain-termination method），又称桑格法（英语：Sanger method），为一种常用的核酸测序技术，用于DNA分析，由英国生物化学家弗雷德里克·桑格于1977年发明。双脱氧链终止法与化学降解法以及其衍生方法统称为第一代DNA测序技术，为人类基因组计划所使用主要测序方法。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>双脱氧链终止法采用DNA复制原理，常见的DNA复制体系使用单脱氧核糖核苷酸，其核苷酸的3’能与其他核苷酸的5’结合形成<strong>磷酸二酯键</strong>，即手拉手形成DNA骨架。</p><p><img src="https://img.juniortree.com/202409081223752.png"></p><p>经过改造后的的<strong>ddNTP</strong>，其3’的羟基被脱去，失去与5’脱水缩合能力，从而在此形成断链，中止DNA链的延伸。此外这些<strong>ddNTP</strong>上还连接有放射性同位素或者荧光基团，能被仪器捕获到。</p><p><img src="https://img.juniortree.com/202409081226895.png"></p><p>以下是一些最常用的带有荧光基团的<strong>ddNTP</strong>：</p><p><img src="https://img.juniortree.com/202409081238850.png"></p><h2 id="测序过程"><a href="#测序过程" class="headerlink" title="测序过程"></a>测序过程</h2><h3 id="体系"><a href="#体系" class="headerlink" title="体系"></a>体系</h3><ul><li><p>单链DNA模版</p><p>Sanger测序法的经典测序反应是将靶DNA片段克隆于 M13mp载体，从重组克隆噬菌体颗粒中分离得到单链DNA模板，再按Sanger 法进行测序。</p></li><li><p>DNS引物（Primer</p><p>和PCR的作用类似，与DNA模版的部分序列互补配对，确定起始位置，一般来说，通用引物的 长度以15~30bp 为宜。</p></li><li><p>DNA聚合酶</p><p>用来合成DNA长链</p></li><li><p>正常的脱氧核苷酸三磷酸（dNTP）</p></li><li><p>改造后的双脱氧核苷酸三磷酸（ddNTP）</p></li><li><p>缓冲液</p></li></ul><h3 id="测序反应"><a href="#测序反应" class="headerlink" title="测序反应"></a>测序反应</h3><p>之后在反应体系内进行复制，在此过程中存在着两种复制情况：</p><ul><li><p>dNTP</p><p>如果DNA聚合酶刚好连接的是dNTP，则反应可以继续下去，DNA就可以正常连接形成长链，和正常PCR复制相同</p></li><li><p>ddNTP</p><p>如果DNA聚合酶连接的是ddNTP，此时由于其3’缺少羟基，无法发生正常的聚合反应，因此复制中断，形成短连接</p></li></ul><p>实际上复制的过程要分为四次，分别往四个独立的体系中加入<strong>ddATP</strong>、<strong>ddTTP</strong>、<strong>ddCTP</strong>、<strong>ddGTP</strong>，分别进行四次测序反应，分别显影（关于这个部分实际上存在疑问，有些资料说可以同时测序，有些则提出需要分别测序</p><p><img src="https://img.juniortree.com/202409081316133.png"></p><p>具体的复制情况如下图所示：</p><p><img src="https://img.juniortree.com/202409081255223.png"></p><h3 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h3><p>按照更合理的顺序来说，这个过程需要四个单独的反应来测试所有四种 ddNTP。在从结合引物进行多轮模板 DNA 延伸后，将所得 DNA 片段热变性，并使用凝胶电泳按大小进行分离。 1977 年的最初出版物中，ssDNA 碱基配对环的形成是在某些位置解析条带时遇到严重困难的原因。这通常使用变性聚丙烯酰胺-尿素凝胶进行，四个反应中的每一个都在四个单独泳道（泳道 A、T、G、C）之一中运行。然后可以通过放射自显影或紫外光观察 DNA 带，并且可以从X 射线胶片或凝胶图像上直接读取 DNA 序列。</p><p><img src="https://img.juniortree.com/202409081322455.png"></p><p><img src="https://img.juniortree.com/202409081234022.png"></p><h2 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h2><h3 id="脱氧核苷酸三磷酸和脱氧核糖核苷酸的区别："><a href="#脱氧核苷酸三磷酸和脱氧核糖核苷酸的区别：" class="headerlink" title="脱氧核苷酸三磷酸和脱氧核糖核苷酸的区别："></a><strong>脱氧核苷酸三磷酸和脱氧核糖核苷酸的区别</strong>：</h3><p>下面是GPT给出的解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">脱氧核苷酸三磷酸（deoxyribonucleoside triphosphate, dNTP）和脱氧核糖核苷酸（deoxyribonucleotide）是两种密切相关的分子，但它们之间有一些关键的区别：</span><br><span class="line"></span><br><span class="line">1.磷酸基团的数量：</span><br><span class="line">•脱氧核苷酸三磷酸（dNTP）：包含一个核苷（由一个脱氧核糖和一个碱基组成）以及三个磷酸基团。这是DNA合成过程中使用的前体分子。在DNA复制或修复中，dNTP会失去两个磷酸基团，生成相应的脱氧核苷酸并加入到DNA链中。</span><br><span class="line">•脱氧核糖核苷酸：通常指的是核苷和一个磷酸基团，即单磷酸脱氧核糖核苷酸（如dAMP、dGMP、dCMP、dTMP）。它是dNTP在被加入到DNA链中后留下的形式。</span><br><span class="line">2.功能：</span><br><span class="line">•dNTP：作为DNA聚合酶在合成DNA链时的原料。在合成过程中，dNTP提供碱基，并通过形成磷酸二酯键将其插入到新生的DNA链中。</span><br><span class="line">•脱氧核糖核苷酸：这是DNA链中的构成单元，每一个碱基在DNA链中都是以单磷酸形式存在。</span><br><span class="line">3.化学结构：</span><br><span class="line">•dNTP：核糖上的2’位碳是氢（去除了2’位的羟基），并且连接三个磷酸基团（α、β、γ磷酸）。</span><br><span class="line">•脱氧核糖核苷酸：核糖上的2’位碳也是氢，但只有一个磷酸基团（α磷酸）与其相连。</span><br><span class="line"></span><br><span class="line">总结来说，dNTP是含有三个磷酸基团的DNA前体分子，而脱氧核糖核苷酸通常是指单磷酸的形式，是dNTP在参与DNA合成后的产物。</span><br></pre></td></tr></table></figure><p>我认为，<strong>脱氧核苷酸三磷酸</strong>在参与DNA的复制过程中，为复制过程中提供能量，发生去磷酸化，从而磷酸基团断裂，生成相应的<strong>脱氧核糖核苷酸</strong>并加入到DNA链中。</p><p>因此体系中加入<strong>脱氧核苷酸三磷酸</strong>不仅仅解决了复制原料问题，还解决了能量问题。</p><blockquote><p>参考目录：<a href="https://en.wikipedia.org/wiki/Sanger_sequencing#">Sanger sequencing</a>、<a href="https://zh.wikipedia.org/wiki/%E6%A1%91%E6%A0%BC%E6%B5%8B%E5%BA%8F">桑格测序</a>、《高通量测序技术》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基因 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Golang和Docker图像无损压缩方案</title>
      <link href="/2024/11/02/Tech/%E5%9F%BA%E4%BA%8EGolang%E5%92%8CDocker%E5%9B%BE%E5%83%8F%E6%97%A0%E6%8D%9F%E5%8E%8B%E7%BC%A9%E6%96%B9%E6%A1%88/"/>
      <url>/2024/11/02/Tech/%E5%9F%BA%E4%BA%8EGolang%E5%92%8CDocker%E5%9B%BE%E5%83%8F%E6%97%A0%E6%8D%9F%E5%8E%8B%E7%BC%A9%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Golang和Docker图像无损压缩方案"><a href="#基于Golang和Docker图像无损压缩方案" class="headerlink" title="基于Golang和Docker图像无损压缩方案"></a>基于Golang和Docker图像无损压缩方案</h1><blockquote><p>本项目已经开源到了Github上：<a href="https://github.com/Aicnal/composeImage">composeImage</a>，如果对你有帮助欢迎Star！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者的NAS中存有大量的高清图片，这些图片占据的大量的空间，导致笔者的存储空间吃紧，同时文件空间太大不利于传输和分享，只能一个人存到本地太不够意思了。</p><p>因此我必须想出一种高效的方式来压缩图片，使其便于存储和发送，这时候我就想到了使用<code>webp</code>这种格式</p><p>笔者之前很喜欢用Python，因为它简单易用，但是这次要处理大约4万张图片，Python的性能确实不太够。这时候我想到了Golang，它同样简单易用，而且性能优异，还可以进行静态编译，我何乐而不为呢？</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>首先我们要明确需求：</p><ul><li>能实现<code>jpg</code>和<code>png</code>格式的自动转换</li><li>能监控文件夹，如果监测到文件夹内存在文件变动则自动继续转换</li><li>重启后对已经转换过的文件不再继续转换，自动跳过</li><li>性能尽量要好，使用高并发，多线程</li></ul><p>之后我们就可以按照上面的需求开始写了，实际上写的过程很简单，我是直接丢给GPT进行写的，但是在这过程中存在一个问题，笔者是ARM Mac用户，而NAS是基于x86的，那么就必须使用交叉编译或者在NAS上重新搭建Golang环境。显然后者更加麻烦而且臃肿，我果断选择交叉编译——好了，第一个坑来了，我第一次使用的是来自Golang官方的<code>golang.org/x/image/webp</code>，直接运行的时候出现报错，显示导入错误，但是我仔细检查后觉得没有错误，就使用第三方<code>github.com/chai2010/webp </code>库，完美运行。</p><p>但到正式交叉编译的时候又傻眼了，显示缺少对于的gcc编译器。。。我直接裂开，后来我想到可以在容器内进行编译，再使用一个基础容器进行封装就好了</p><h3 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h3><p>首先要先在容器内进行编译，在这里我们直接使用一个基于Golang的容器，由于这个基础镜像所占空间比较大，我们使用<code>alpine</code>作为承载容器运行这个编译后的二进制文件</p><p>其中有一个坑就是，编译出来的文件需要一些依赖项，必须将其补齐才能正常运行</p><p>在docker中我们指定了两个文件夹来作为输入和输出文件夹</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的Go镜像作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span> AS builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前目录内容到工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod download</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译Go程序</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o composeImage .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一个更小的基础镜像来运行编译后的二进制文件</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装运行二进制文件所需的依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache libc6-compat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从构建阶段复制编译后的二进制文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/composeImage .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x composeImage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行程序</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;./composeImage&quot;</span>, <span class="string">&quot;-input&quot;</span>, <span class="string">&quot;/input&quot;</span>, <span class="string">&quot;-output&quot;</span>, <span class="string">&quot;/output&quot;</span>, <span class="string">&quot;-quality&quot;</span>, <span class="string">&quot;90&quot;</span>, <span class="string">&quot;-workers&quot;</span>, <span class="string">&quot;4&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Aicnal/composeImage.git</span><br><span class="line">go mod download</span><br></pre></td></tr></table></figure><p>请不要直接使用<code>Go run...</code>进行运行，你必须提供输入和输出目录，压缩质量和线程数量<br>在正式使用之前请先进行编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build go build -o composeImage .</span><br></pre></td></tr></table></figure><p>之后再指定相关目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./composeImage -input /input -output /output -quality 90 -workers 4</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>直接进行Docker构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t image-compressor:latest .</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(pwd)/input:/input -v $(pwd)/output:/output image-compressor:latest</span><br></pre></td></tr></table></figure><p>或者你可以使用<code>docker-compose.yaml</code>进行统一管理</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">image-compressor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">image-compressor:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./input:/input</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./output:/output</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感觉日子过得越来越无趣</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E6%84%9F%E8%A7%89%E6%97%A5%E5%AD%90%E8%BF%87%E5%BE%97%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%97%A0%E8%B6%A3/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E6%84%9F%E8%A7%89%E6%97%A5%E5%AD%90%E8%BF%87%E5%BE%97%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%97%A0%E8%B6%A3/</url>
      
        <content type="html"><![CDATA[<p style="">感觉很少能有东西能让我感兴趣，游戏也好，技术也好，摄影也好，专业也好</p><p style="">我不知道是不是气候的原因，整个人变得懒懒的，很嗜睡</p><p style="">尤其是舍友早上五六点的时候喜欢打呼噜，导致我很容易被吵醒，变得更加嗜睡，易怒</p><p style="">他们忽然间说我变成熟了，我很难说是不是真的变成熟了，我感觉自己对一些事情似乎慢慢淡然了，感情也好，其他也罢</p><p style="">我没有很想赢只是不想输</p><p style="text-align: center; ; "><iframe src="https://music.163.com/#/song?id=2617644444" width="100%" height="300px" frameborder="0" allowfullscreen="true" framespacing="0" style="display: inline-block"></iframe></p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们是何时失去探知欲的</title>
      <link href="/2024/11/02/%E6%B7%B1%E5%85%A5%E6%80%9D%E8%80%83/%E6%88%91%E4%BB%AC%E6%98%AF%E4%BD%95%E6%97%B6%E5%A4%B1%E5%8E%BB%E6%8E%A2%E7%9F%A5%E6%AC%B2%E7%9A%84/"/>
      <url>/2024/11/02/%E6%B7%B1%E5%85%A5%E6%80%9D%E8%80%83/%E6%88%91%E4%BB%AC%E6%98%AF%E4%BD%95%E6%97%B6%E5%A4%B1%E5%8E%BB%E6%8E%A2%E7%9F%A5%E6%AC%B2%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="我们是何时失去探知欲的"><a href="#我们是何时失去探知欲的" class="headerlink" title="我们是何时失去探知欲的"></a>我们是何时失去探知欲的</h1><p>晚上回宿舍的时候突然想到以前的事情，遂写下这篇蓄谋已久但是从未动笔的文章</p><p>小时候家里喜欢种花花草草，我记得种得最多的是吊兰，第一株是从楼下花坛里面移栽过来的，我家在南方，有一年南方的冬天特别冷，然后我怕它冻死，就从热水器里面接了热水，然后浇了进去。可能在现在看来这个想法让人有点啼笑皆非，但是当时的我觉得这是一个“很好”的办法（有可能是小朋友对大自然的同情心</p><p><img src="https://img.juniortree.com/202409260044099.png"></p><p>好在吊兰在我的“毒手”下熬过了那个冬天，之后在枝条上长出了“气根”，这时候只要把它剪下来就可以重新移植了</p><p><img src="https://img.juniortree.com/202409260047654.jpeg"></p><p>我当时做了一个很有意思的尝试，拿了很多个塑料杯，然后把剪下来的小吊兰放到杯子里面，将里面泡上水。等到很多年会想起这件事的时候，才发现原来这叫做“水培”，属于是“歪打正着”了</p><p>在我大概读四五年级的时候，我去了一趟广州，在当地的商场里面看到了一本对我成长影响还挺深刻的书，《科学实验王》</p><p><img src="https://img.juniortree.com/202409260002138.jpeg"></p><p>可能这个名字在现在可能听着会让你觉得有些尴尬或者说想找个地缝钻进去，但是对于只有10来岁的我来说，这本书的的确确是很具吸引力的</p><p>当时的我可能很难明白里面的一些概念，比如说“氧化还原”、“叶绿素的萃取”等等，但是对于我来说这些书籍的一样类似于一个引路人，并不需要很深奥的解释，只要把这些科学知识同生活联系在一起，将得通俗易懂，小朋友容易接受，这就够了</p><p><img src="https://img.juniortree.com/202409260012793.jpeg"></p><p>哪怕在正式经受过系统的科学教育之后，当我再次翻阅这些书的时候我发现其中里面有些观点是不正确或者有偏颇的，但这并没有改变我对这系列书籍的热爱</p><p>甚至在小学的时候，我就开始依赖这些“课本外”的知识去解决一些深层次的问题</p><p>当我开始上高年级和初中之后，能阅读一些层次更深的书籍之后，我开始对“量子力学”和“微生物学”产生了浓厚的兴趣</p><p>在初中教育时期，小学所上的《科学》逐渐被细化开来，变成《生物》、《地理》、《物理》、《化学》。在初一的时候，我开始正式学习《生物》的相关知识</p><p>当时我的生物老师是一个很有教学经验而且很严格的女老师，那时候她大概快50岁了，她上课从来不说普通话，因为普通话远远没有方言形象和生动，又好在我们班上没有外地的，因此无伤大雅，反而称为了她教学上的优点</p><p>初中的生物学基本上以“通识”为主，我记得基本上就教大家认识一下各种生物，当时课本安排应该是从“低等到高等”这样的顺序，对生物学有着一些基本的概念</p><p>我记得我当时最感兴趣的应该是有关人体的内容，那应该是在初一下，学习了心肺循环。那一段时间我刚好得了较为严重的肺炎，因此只能请假前往医院打针，当时在打针的时候我脑子里就开始想药水是怎么流动的，是怎么循环的，慢慢地搞清楚了心肺循环的全过程——既生动，又形象</p><p><img src="https://img.juniortree.com/202409260033235.png"></p><p>我记得当时我最感兴趣的应该是和免疫相关的，我具体记不清在哪一本书里面了，但是篇幅应该不多，只给了很少的分量，当时我还扼腕叹息</p><p>后来在家中我也做了很多奇怪的东西，比如说拿用来发酵的商品酵母，或者是青霉素、红霉素等等将其捣碎，然后再拿一个纸杯，然后在里面放一个棉球，加点用蔗糖（白砂糖）调配的糖水，之后再把上面的“菌种”撒进去，最后再套上一个用铝箔做的盖子，密封好，丢到书桌抽屉温暖的地方就算完工</p><p>可能现在看起来，我的这个“培养”过程有点过于粗糙，甚至可以说是危险，但在当时它给我带来了不少的乐趣，一直到高中以后，我才意识到我初中的时候培养的“抗生素菌种”可能是被抗生素淘汰后的“耐药菌”，这些事情还常常被我记在脑海里，令人寻味</p><p>我的第一本书“量子力学”入门书籍是霍金先生的《时间简史》，这本书陪伴了我初中三年的时光，当然还有《果壳中的宇宙》。刚开始其实是被它彩色印刷的纸张所吸引，这本书我同样阅读了很多次，你也自然而然地可以想到一个只有小学学历的人怎么可能完全吃透其中的内容</p><p><img src="https://img.juniortree.com/202409260017610.jpeg"></p><p>但是里面的一些基本观点或者理论同样对我今后的学习产生了重要的影响，比如说“曾祖父悖论”、“海瑟堡测不准原理”、“宇宙大爆炸模型”等等，时至今日哪怕我已经不再进行物理学方面的学习了，其中的内容我依然可以信手拈来</p><p>初二实际上是一个还蛮重要的转折点，因为在这一学期开始正式学习物理学科的内容。当时学的还是一些经典物理学的内容，诸如一些“阿基米德原理”啊等等，我对这些知识完全提不起一点兴趣。当时初二上是我父亲教我的，他从高中部下来，算支教。初中学的物理学还算很贴切实际生活，而我对日常生活中的物理学感触还是很丰富的，因此当时成绩并不差，第一次月考物理考了98分，全年级第二。之后由于各种原因换了新的物理老师</p><p>我的父亲在我成长道路上对我的帮助无疑是巨大的，他很鼓励我去探索发现科学，不管是物理上的抑或者生物、化学上的。我从前很喜欢和他讨论量子力学上的内容，直到有一天他说：“我回答不上来了，你要自己去找答案了”</p><p>这时候我才慢慢意识到我在某方面的学识已经超过他了，我确实要自己去找答案了</p><p>如果说初中给了我一个相对自由的空间的话，那么高中是彻彻底底的“凡尔登绞肉机”</p><p>高中的时候我毅然选择了传统理科，也就是物理、化学和生物作为我的高考科目。但是高中的内容和我希望去学习的内容截然不同，我在这时候逐渐丧失了对物理学的热情</p><p>在我看来，高中的物理学很少有比较创新或者探索性的内容，都是以经典力学为主，而且和数学的关系颇深。我的高中物理老师和我关系很好，他对我的评价就是“思路有了，但是数学太差”，对于要参加高考的我来说，物理真的是当头一棒，我很难从繁忙的教学任务和一次又一次差到极点的考试成绩中获得成就感</p><p>“做这件事情不快乐，我为什么要去做呢，我真的能坚持下来么？”这也是我当初从物理系转到生科院问得自己最多的一句话，“我真的快乐么？”</p><p>直到现在也还有人会和我说：“是你自己踢走了一路平坦的人生”，那我真的想问一下，你所追求的事情就是真正好的么？十年后，二十年后他真的还好么？甚至我真的能靠这条路走下去么？如果这些都不能那我还是选自己最爱的好了</p><p>在物理学习受阻的时候，生物的学习却要好得多，一方面是我确实比较喜欢，每次上课结束之后我都会马上做完作业加以巩固；另一方面高中的生物学确实有点像“背书比赛”，你只需要记住特点的名词、概念，就能获得不错的分数——“那为什么我能名列前茅呢？”现在想想确实挺有道理的</p><p>当时每周六晚上放假，我喜欢在电视上看B站，经常会刷到一些讲免疫或者病原体的视频，当时我有一个隔着走廊的朋友，有时候第二天上课我就会把昨天晚上看到的东西写到纸条上，然后传给他看，他会很仔细地看完然后和我分享，我们俩经常这样，乐此不疲</p><p>高考报志愿那年我并没有如愿进入生物专业学习，反而去到了一个偏向物理学的专业，我知道自己不是学习物理的料，遂下学期转入生命科学学院，学习生物科学</p><p>大学以来，我反而觉得觉得自己逐渐在丧失求知欲，明明已经得到了一个很好的平台，是时候大展身手，这时候反而畏畏缩缩了</p><p>而且我的注意力也在下降，以前可以安安稳稳地认认真真读完一本书，现在却要收到各种干扰——来自社交媒体、游戏等等</p><p>信息获取渠道越来越方便，我们开始只注重于答案本身而忽略了其中的过程</p><p>短视频高速发达，各种碎片化、未经考证的消息扑面而来</p><p>想到哪里写到哪里吧</p>]]></content>
      
      
      <categories>
          
          <category> 深入思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fofa的使用与防护</title>
      <link href="/2024/11/02/Tech/fofa%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%98%B2%E6%8A%A4/"/>
      <url>/2024/11/02/Tech/fofa%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%98%B2%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="fofa的使用与防护"><a href="#fofa的使用与防护" class="headerlink" title="fofa的使用与防护"></a>fofa的使用与防护</h1><h2 id="fofa是个啥"><a href="#fofa是个啥" class="headerlink" title="fofa是个啥"></a>fofa是个啥</h2><blockquote><p>FOFA是一款网络空间测绘的搜索引擎，旨在帮助用户以搜索的方式查找公网上的互联网资产。<a href="https://link.zhihu.com/?target=https://fofa.info">https://fofa.info</a></p><p>简单来说，FOFA的使用方式类似于谷歌或百度，用户可以输入关键词来匹配包含该关键词的数据。不同的是，这些数据不仅包括像谷歌或百度一样的网页，还包括像摄像头、打印机、数据库、操作系统等资产。</p><p>网络空间测绘可以被认为是网络空间的“地图”。就像谷歌地图或高德地图通过卫星图像对地形进行测绘，网络空间测绘也是通过技术探针对全球网络资产进行探测。</p><p>然而，网络空间分为公网和内网。FOFA主要针对公网上的资产进行探测，类似于谷歌地图上的建筑物（IP地址），虽然可以看到建筑物的外部结构和规模，但无法了解内部的情况。这是因为侵犯内网的隐私是违法的。</p></blockquote><p>你可以将fofa理解为网安界的Google search，你可以通过一些特定的语法来获取特定的信息，比如说对应的IP或者端口</p><p>对于专业的网络安全人员，可以使用fofa来搜寻潜在的网络漏洞；对于个人用户来说，可以在合法的前提下使用fofa来寻找一些“有意思”的东西</p><h2 id="fofa使用"><a href="#fofa使用" class="headerlink" title="fofa使用"></a>fofa使用</h2><p>fofa的官网：<a href="https://fofa.info/">https://fofa.info</a></p><p><img src="https://img.juniortree.com/202409282154602.png"></p><p>乍一看是不是和百度或者Google的界面有点类似？都提供了一个搜索框</p><p>fofa有自己的一套语法：</p><table><thead><tr><th>逻辑连接符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>匹配，<code>=&quot;&quot;</code>时可查询不存在字段或值为空的情况。</td></tr><tr><td><code>==</code></td><td>完全匹配，<code>==&quot;&quot;</code>时可查询存在且值为空的情况。</td></tr><tr><td><code>&amp;&amp;</code></td><td>与（AND），所有条件必须为真。</td></tr><tr><td>&#96;</td><td></td></tr><tr><td><code>!=</code></td><td>不匹配，<code>!=&quot;&quot;</code>时可查询值为空的情况。</td></tr><tr><td><code>*=</code></td><td>模糊匹配，使用<code>*</code>或<code>?</code>进行搜索。</td></tr><tr><td><code>()</code></td><td>确认查询优先级，括号内的内容优先级最高。</td></tr></tbody></table><table><thead><tr><th>查询示例</th><th>描述</th></tr></thead><tbody><tr><td><code>title=&quot;beijing&quot;</code></td><td>从标题中搜索“北京”。</td></tr><tr><td><code>header=&quot;elastic&quot;</code></td><td>从HTTP头中搜索“elastic”。</td></tr><tr><td><code>body=&quot;网络空间测绘&quot;</code></td><td>从HTML正文中搜索“网络空间测绘”。</td></tr><tr><td><code>fid=&quot;sSXXGNUO2FefBTcCLIT/2Q==&quot;</code></td><td>查找相同的网站指纹。</td></tr><tr><td><code>domain=&quot;qq.com&quot;</code></td><td>搜索根域名带有qq.com的网站。</td></tr><tr><td><code>icp=&quot;京ICP证030173号&quot;</code></td><td>查找备案号为“京ICP证030173号”的网站。</td></tr><tr><td><code>js_name=&quot;js/jquery.js&quot;</code></td><td>查找网站正文中包含js&#x2F;jquery.js的资产。</td></tr><tr><td><code>js_md5=&quot;82ac3f14327a8b7ba49baa208d4eaa15&quot;</code></td><td>查找js源码与之匹配的资产。</td></tr><tr><td><code>cname=&quot;ap21.inst.siteforce.com&quot;</code></td><td>查找cname为”ap21.inst.siteforce.com”的网站。</td></tr><tr><td><code>cname_domain=&quot;siteforce.com&quot;</code></td><td>查找cname包含“siteforce.com”的网站。</td></tr><tr><td><code>cloud_name=&quot;Aliyundun&quot;</code></td><td>通过云服务名称搜索资产。</td></tr><tr><td><code>product=&quot;NGINX&quot;</code></td><td>搜索此产品的资产。</td></tr><tr><td><code>category=&quot;服务&quot;</code></td><td>搜索此产品分类的资产。</td></tr><tr><td><code>icon_hash=&quot;-247388890&quot;</code></td><td>搜索使用此 icon 的资产。</td></tr><tr><td><code>host=&quot;.gov.cn&quot;</code></td><td>从url中搜索”.gov.cn”搜索要用host作为名称。</td></tr><tr><td><code>port=&quot;6379&quot;</code></td><td>查找对应“6379”端口的资产。</td></tr><tr><td><code>ip=&quot;1.1.1.1&quot;</code></td><td>从ip中搜索包含“1.1.1.1”的网站。</td></tr><tr><td><code>ip=&quot;220.181.111.1/24&quot;</code></td><td>查询IP为“220.181.111.1”的C网段资产。</td></tr><tr><td><code>status_code=&quot;402&quot;</code></td><td>查询服务器状态为“402”的资产。</td></tr><tr><td><code>protocol=&quot;quic&quot;</code></td><td>查询quic协议资产。</td></tr><tr><td><code>country=&quot;CN&quot;</code></td><td>搜索指定国家(编码)的资产。</td></tr><tr><td><code>region=&quot;Xinjiang Uyghur Autonomous Region&quot;</code></td><td>搜索指定行政区的资产。</td></tr><tr><td><code>city=&quot;Ürümqi&quot;</code></td><td>搜索指定城市的资产。</td></tr><tr><td><code>cert=&quot;baidu&quot;</code></td><td>搜索证书(https或者imaps等)中带有baidu的资产。</td></tr><tr><td><code>cert.subject=&quot;Oracle Corporation&quot;</code></td><td>搜索证书持有者是Oracle Corporation的资产。</td></tr><tr><td><code>cert.issuer=&quot;DigiCert&quot;</code></td><td>搜索证书颁发者为DigiCert Inc的资产。</td></tr><tr><td><code>cert.is_valid=true</code></td><td>验证证书是否有效，true有效，false无效。</td></tr><tr><td><code>cert.is_match=true</code></td><td>证书和域名是否匹配；true匹配、false不匹配。</td></tr><tr><td><code>cert.is_expired=false</code></td><td>证书是否过期；true过期、false未过期。</td></tr><tr><td><code>jarm=&quot;2ad...83e81&quot;</code></td><td>搜索JARM指纹。</td></tr><tr><td><code>banner=&quot;users&quot; &amp;&amp; protocol=&quot;ftp&quot;</code></td><td>搜索FTP协议中带有users文本的资产。</td></tr><tr><td><code>type=&quot;service&quot;</code></td><td>搜索所有协议资产，支持subdomain和service两种。</td></tr></tbody></table><h2 id="fofa的防护"><a href="#fofa的防护" class="headerlink" title="fofa的防护"></a>fofa的防护</h2><p>fofa的使用有可能暴露我们的服务，在各种论坛上我们经常可以看到各种使用fofa进行扫描然后进行深透攻击获取用户数据的事情</p><p>我们不能有害人之心，但同时我们也要有所防护，以下是我总结出的一些方法：</p><ol><li><p>使用Nginx或者Caddy等进行反向代理，尽量少的暴露其他端口</p><p>fofa扫出来的经常都是一些端口，我们使用这些web服务器进行反向代理，就不必暴露除80和443以外的端口了。我们就只需要在云服务或者ufw中暴露最少的端口，减少暴露风险</p><p>如果你是使用docker部署的服务，那么可以使用docker内的网络，这样就不需要开放云防火墙的端口了</p><p><img src="https://img.juniortree.com/202409282213167.png"></p><p>你可以使用以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:e4:a3:b5:b9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>这里的IP就是<code>172.17.0.1</code>，使用这个就不需要开放防火墙的端口了</p></li><li><p>修改用户名和默认密码，设定特定权限</p><p>如果你不得不要暴露端口了，那么请一定要修改用户名和密码</p><p>较早4.0版本前的qb设置使用的是默认密码，经常出现被“黑”的情况</p><p>至于权限未设定而造成损失的在alist中尤为突出，经常有人不禁用guest账户，泄漏大量私人数据（哪怕alist文档中明确写明了要注意隐私问题</p></li><li><p>限制IP访问（未明确使用</p><p>可以通过限制fofa的IP来避免被扫描，但是这种方法实际上很难实现，因为除了fofa还有其他的空间测绘程序，比如说360的</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进化生物学</title>
      <link href="/2024/11/02/Note/%E8%BF%9B%E5%8C%96%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
      <url>/2024/11/02/Note/%E8%BF%9B%E5%8C%96%E7%94%9F%E7%89%A9%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="进化生物学"><a href="#进化生物学" class="headerlink" title="进化生物学"></a>进化生物学</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进化（演化）生物学的学习已经快过半了，目前笔记已经上传到notion中：<br><a href="https://juniortree.notion.site/Evolutionary-Biology-98aaa4423ec3454f9a0aaf2ec17c6140">《生物进化学》(Evolutionary Biology)</a><br>这门课的深度还是存在的，但在我看来，其中最核心的其实可能在于对进化这个动词的理解，这其中也有我个人对于人类这个种群的一些思考</p><h2 id="什么是进化？"><a href="#什么是进化？" class="headerlink" title="什么是进化？"></a>什么是进化？</h2><p>可能在很多不进行系统生物学学习的人看来，进化给人一种“先进”的意思，从“低等”再到高等。但其实“进化”这个词——“Evolutionary”翻译为“演化”可能更为恰当，它是从种群的角度看待物种的产生、发展和衰退的这样一个过程</p><p>人类总喜欢赋予“进化”以意识形态，比如说我们人比所谓“草履虫”等原核生物更加“高级”，但实际上这种说法是不正确的，不客观的。</p><p>我认为以“演化”为动词可能更加准确，也避免了人们产生误解</p><h2 id="进化生物学的发展"><a href="#进化生物学的发展" class="headerlink" title="进化生物学的发展"></a>进化生物学的发展</h2><p>实际上在达尔文之前已经有很多科学家都在探讨“进化”这个话题，比如说柏拉图、亚里士多德等等学者，但他们所提出的观点大多都不完整，依靠或者借助“上帝”来试图解释人的形成</p><p>第一位系统提出进化理论的人是拉马克，他代表了18世纪进化生物学的巅峰。在高中的时候我们其实学过拉马克学说，当时他的“用进废退”观点经常出现在选择题中，作为错误选项出现</p><p>但是在近代越来越多的学者开始意识到拉马克学说的重要性，或者更准确地说是意识到其内核，比如说基因或者基因启动子的甲基化现象——表观遗传，在不改变遗传物质的情况下改变个体的性状</p><p>拉马克确实观察到了部分的现象，但是受限于他当时的科技发展和社会环境，他没办法从中抽丝剥茧找出性状改变的原因。在我看来其中还有一个很重要的原因就是拉马克没有像达尔文一样去参考观察更多的物种，达尔文得以游历四方，有了更多的原始资料和记载，尤其是在加拉帕戈斯群岛中生态环境的相对独立性，给予了达尔文几乎完美的研究对象，达尔文也自然没有放弃这样的研究机会</p><blockquote><p><strong>达尔文发现这里的动植物为适应自然环境而发生变化，如生活在各个岛上的同一种鸟类和海龟的形态和习性大不相同。这个发现使他认识到自然也能对物种进行选择，为他的“适者生存”的进化观点提供了有力的证据。</strong><br><a href="https://zhuanlan.zhihu.com/p/90265784"># 生物学圣地：加拉帕戈斯群岛–进化论诞生之地</a></p></blockquote><h2 id="《物种起源》"><a href="#《物种起源》" class="headerlink" title="《物种起源》"></a>《物种起源》</h2><p>对于大多数人来说，《物种起源》中最深刻的应该是关于“适者生存”的部分，经常给人与野蛮与无情的成分</p><p>在薛之谦的《动物世界》中曾经有过这样几句歌词：</p><blockquote><p><strong>东打一下西戳一下</strong><br><strong>动物未必需要尖牙</strong><br><strong>示爱的方法有礼貌或是我管它</strong><br><strong>要将情人一口吞下</strong><br><strong>还要显得温文尔雅</strong><br><strong>螳螂委屈的展示旧伤疤</strong><br><strong>求偶时候一惊一乍</strong><br><strong>因为害怕时常倒挂</strong><br><strong>走投无路的情况下舍弃了尾巴</strong><br><strong>如果不能将它同化就寄生于它</strong><br><strong>大不了一同腐化</strong><br><strong>努力进化 笑动物世界都太假</strong><br><strong>祖先 已磨去爪牙</strong><br><strong>相爱相杀 一定有更好的办法</strong><br><strong>攀比一下 谁先跪下</strong><br><strong>不再进化 动物世界里都太傻</strong></p></blockquote><p>我们不必去过于追求在艺术作品中的现实性元素，但这些歌词确实在一定程度上反映了大众、艺术界对于“物种进化”的一些基本看法</p><h2 id="人类种群中的“进化”"><a href="#人类种群中的“进化”" class="headerlink" title="人类种群中的“进化”"></a>人类种群中的“进化”</h2><p>可能在这里我们讨论人类种群中的“进化”又或者更合适点——“演化”有些过于“敏感”，但是我认为自然界和人类社会总是存在着某些相似的，虽然说自然界可能会比人类社会危险万分，人类社会也可能比自然界危险万分。</p><p>在人类社会和自然界中寻找相似性，对于进化生物学的学习还是相当“危险”或者说“不负责任”的，在这里请让我小心翼翼地阐明几个我认为还算比较有共鸣的观点吧！</p><h3 id="对“最适者”的理解问题"><a href="#对“最适者”的理解问题" class="headerlink" title="对“最适者”的理解问题"></a>对“最适者”的理解问题</h3><p>进化生物学中：</p><blockquote><p>那些能留下最多后代的类型才是“最适者”<br>在斗争中取胜者不一定是最适者，只有遗传下去才有意义，把“适者生存”理解为“优胜劣汰”是不全面的</p></blockquote><p>那么在人类社会能不能理解为在古代娶“三妻四妾”，在近代出去“外遇”、“出轨”，这些都是写在基因里面人类对于扩大生殖的具体写照</p><h3 id="选择的模式问题（选择只选择性状）"><a href="#选择的模式问题（选择只选择性状）" class="headerlink" title="选择的模式问题（选择只选择性状）"></a>选择的模式问题（选择只选择性状）</h3><p>进化生物学中：</p><blockquote><p>自然界中还存在着多种其他的选择模式或机制<br>对于“自然选择起着筛子作用”这样的理解，就有加以说明的必要</p></blockquote><p>在人类社会中有些人的生存力很低（指的是生理上的），但是他特别有钱，能给他治好或者缓解其症状，能和异性进行交配繁殖产生其后代。那么在这其中“钱”是不是也能作为其被选择性状，而“钱”是不是和其基因内部存在着某种关系，比如说特别会经商？</p><h3 id="间断选择"><a href="#间断选择" class="headerlink" title="间断选择"></a>间断选择</h3><p>进化生物学中：</p><blockquote><p>自然选择同时“选留”两个极端类型的特征，会增加基因的遗传多样性</p></blockquote><p>这个其实很好理解，处于两个“阶层”的人互相结婚生子，在这样的过程中保留了两个比较极端的”阶层“，极穷或者极富有，在学这个的过程中我始终没有理解”增加基因的遗传多样性“这个问题</p><h3 id="先锋者效应"><a href="#先锋者效应" class="headerlink" title="先锋者效应"></a>先锋者效应</h3><p>进化生物学中：</p><blockquote><p>由少数几个携带有亲本种群中部分遗传变异的种群建立起新的种群，新种群中的基因频率偏离流原来的亲本种群<br>新群体中的基因更多的偏向于<strong>先锋者</strong>的基因</p></blockquote><p>这个我理解为在某些行业中的<strong>Leader</strong>更多地决定了某些东西的走向，比如说 Openai 作为生成式大模型的“领头人”，在一定程度上也决定了未来大模型的发展方向</p><h3 id="不均等交配"><a href="#不均等交配" class="headerlink" title="不均等交配"></a>不均等交配</h3><p>进化生物学上：</p><blockquote><p>交配方式：随机交配、选择交配</p></blockquote><p>对配偶的选择，我们爱上对方可能是因为对方的某些特质，有物质上的，也有精神上的。从分子基因学的角度就是馋他&#x2F;她的基因</p><h3 id="利他主义"><a href="#利他主义" class="headerlink" title="利他主义"></a>利他主义</h3><p>进化生物学上：</p><blockquote><p>为了种群或物种的利益而降低个体适应度的一种特性<br>在自然选择的角度上来说，利他主义很难存在<br>共享遗传物质，从基因的亲缘系数中进行定性考虑</p></blockquote><p>为什么说在“自然选择”上认为“利他主义很难存在”，因为在自然界中这种“利他行为”，经常伴随着个体的死亡，死了之后所谓“利他主义”的“基因”失去了载体，因此生存力很低</p><p>我常常将“利他”和人类社会中那些具有所谓“奉献精神”的人挂钩，虽然我们在道德上总是歌颂的，比如说教师、医生等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我始终觉得人类社会和自然界中存在某种相似，虽然可能一直都是</p><p>我们寻找自然的答案，其实是一直在寻找我们自身的答案</p>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>今天是国庆节，先祝祖国75岁生日快乐</p><p>不出意外的话我又失眠了，在这几天里我几乎都是每天凌晨两点多钟才睡着，然后七八点醒过来，之后等课上完或者下午继续睡觉</p><p>说实话对于这种模式其实我个人并不会感到特别痛苦——除了晚上睡不着的时候会很不舒服，但其实这种睡不着有多方面的原因，其实我个人感觉舍友的呼噜是其中占比算小的部分</p><p>我其实觉得我把手机带上床至少得背一半的锅，偷偷摸摸搞手艺活反而对睡眠造成了一些不好的效果。宿舍的床也是我睡不好的重要原因之一——我来北京几乎没有睡过很好的觉，宿舍的床又小又硬，忽然觉得舅舅家的软床很有安全感，尤其是枕头，我整个人几乎可以完全被包裹进去</p><p>在高中的时候其实我就有过一些入睡困难的“症状”，经常半夜辗转反侧，等到天亮鸡鸣的时候自己又醒过来，尤其是在考试前这种状况尤为明显，基本上我只要考试前一晚没睡好那么这次考试就基本寄了（也算是一种很另类的心理暗示</p><p>与夜晚的睡眠恰恰相反的是，我在白天的睡眠出奇的好，不管是回笼觉还是下午的午睡。如果算上白天的睡眠，那么我的总睡眠时长能达到七八个小时（其实也算是正常了</p><p>我其实还是有点担心自己的身体状况的，还是想多活几年好好感受一下世界的温情<del>我甚至还没对象</del></p><p>我其实感觉有一种很舒服的状态就是和一群志同道合的朋友一起讨论自己感兴趣的东西——这种感觉我其实很久没有找到了，在CS Group中确实找到了些感觉</p><p>说起感情我反而更加觉得这是一种很抽象的东西了，感情永远都应该是“双行道”，一方殷勤的付出往往会以一方的“失望”而结束。我忽然觉得其实是我把自己放错了位置，当很好的朋友其实挺好的，至少能一直陪在她身边，和其他朋友的关系也能理清</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分子进化的主要研究内容</title>
      <link href="/2024/11/02/Note/%E5%88%86%E5%AD%90%E8%BF%9B%E5%8C%96%E7%9A%84%E4%B8%BB%E8%A6%81%E7%A0%94%E7%A9%B6%E5%86%85%E5%AE%B9/"/>
      <url>/2024/11/02/Note/%E5%88%86%E5%AD%90%E8%BF%9B%E5%8C%96%E7%9A%84%E4%B8%BB%E8%A6%81%E7%A0%94%E7%A9%B6%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="分子进化的主要研究内容"><a href="#分子进化的主要研究内容" class="headerlink" title="分子进化的主要研究内容"></a>分子进化的主要研究内容</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为什么我会想着专门把这个放出来呢？因为是去年在学习生信的过程中碰到了很多名词，比如说“保守”、“同源”、“进化树”等等。虽然在维基上可以查到很详尽的解释，但是这些知识仍然很难成为体系，之间很难产生联系</p><p>在进化生物学的课程上刚好讲到了这些，我觉得还是很有必要进行总结，对日后生信分析的思路和算法优化还是很有帮助的</p><p>但显然将这些知识完全体系化还是存在难度的，不过没关系——就从现在满满开始吧</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li>经典进化和分子进化的区别<ol><li>经典进化：表型</li><li>DNA、RNA、蛋白质分子</li></ol></li><li>分子进化的一些术语<ol><li>一致性（identity）：两个序列中完全相同的部分（保守）</li><li>相似性（similarity）：特征相像，但是来源不明确（理化性质相似，对蛋白质性质影响不大）</li><li>同源性：来自于同一个祖先</li><li>如果两个基因或蛋白质的序列一致性或相似性很高<ol><li>DNA的一致性60%以上</li><li>氨基酸的一致性30%以上</li><li>它们具有相同或相似的生物学功能</li><li>同源<ol><li>直系同源：随着新物种的产生而产生的同源基因（纵向）</li><li>并系同源：由基因的重复而产生的同源基因（横向）</li></ol></li></ol></li></ol></li><li>分子演化速率的计算<ol><li>蛋白质（氨基酸）水平的演化速率<ol><li>必须有两个或两个以上的同源序列，氨基酸代替速率是相对的</li><li>每个氨基酸就是一个位点，空位不算</li></ol></li><li>分化的时间越短，差异越小</li><li>分子钟（匀速演化</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进化生物学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day1 内蒙古之旅——呼伦贝尔大草原特辑</title>
      <link href="/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/Day1%20%E5%86%85%E8%92%99%E5%8F%A4%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E5%91%BC%E4%BC%A6%E8%B4%9D%E5%B0%94%E5%A4%A7%E8%8D%89%E5%8E%9F%E7%89%B9%E8%BE%91/"/>
      <url>/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/Day1%20%E5%86%85%E8%92%99%E5%8F%A4%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E5%91%BC%E4%BC%A6%E8%B4%9D%E5%B0%94%E5%A4%A7%E8%8D%89%E5%8E%9F%E7%89%B9%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Day1-内蒙古之旅——呼伦贝尔大草原特辑"><a href="#Day1-内蒙古之旅——呼伦贝尔大草原特辑" class="headerlink" title="Day1 内蒙古之旅——呼伦贝尔大草原特辑"></a>Day1 内蒙古之旅——呼伦贝尔大草原特辑</h1><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><p>我们住的酒店在海拉尔市区，离呼伦贝尔景点大概有25公里。在从海拉尔火车站到酒店的过程中我们其实就已经问过出租车师傅了，他告诉我们想去呼伦贝尔草原只有两种办法——租车自驾或者组团去，打车太贵了（这里埋个伏笔</p><p><del>还是感慨一下居然没有往返市区和景点的公交</del></p><p>自驾我不是很敢开车，组团我们觉得不是很自由，而且来之前我们酒店就已经定好了，我们不想改变原来的行程，当时我有一种我们可能去不了了的感觉</p><p>事情的转机发生在我们到海拉尔的第二天早上</p><p>当时我们去到了当地的一家比较有特色的早餐店，人比较多，我们和另外两个广西的老哥拼了桌。在等餐的过程中，他先问我们准备去哪里，原本我们准备去海拉尔国家森林公园，然后老哥就说他们准备去大草原，我又问他们准备怎么去，他就告诉我他们租了个车，自己开车去</p><p><img src="https://img.juniortree.com/202410031938278.webp" alt="内蒙非常有特色的奶茶"></p><p>这时候我们来兴趣了，我就问能不能搭他们的顺风车，然后和他们一起AA车费，结果出乎意料的是老哥欣然答应了，但是只能带我们去，他们要去另外的地方</p><p>这时候我还是有点犹豫的，类似于“有去无回”，但是我想如果这时候不去可能之后就没机会去了，便和我另外一个小伙伴决定去，回来的事情之后再说！</p><p>我们就这样开启了我们呼伦贝尔的行程</p><p><img src="https://img.juniortree.com/202410031925011.png"></p><h2 id="旅途"><a href="#旅途" class="headerlink" title="旅途"></a>旅途</h2><p>路上我们是一路按着导航走（应该也只有一条路，大概半个小时左右就到达了游客中心，下图应该是当地的火电厂，同时路上还可以看到露天煤矿和各种各有的半挂车，感觉矿产资源还挺丰富的</p><p><img src="https://img.juniortree.com/202410031940970.webp"></p><h3 id="进入大草原"><a href="#进入大草原" class="headerlink" title="进入大草原"></a>进入大草原</h3><p>到了游客中心之后需要进行换乘，只能使用官方的摆渡车在各个景点之间往返，摆渡车的价格为一人40元，似乎没有学生票优惠</p><p>大巴很正规，每个人都有自己的位置，而且发车发得很勤，基本上等五分钟就会有车过来</p><p><img src="https://img.juniortree.com/202410031948270.webp"></p><h2 id="景点推荐"><a href="#景点推荐" class="headerlink" title="景点推荐"></a>景点推荐</h2><p>跟着大巴车走，一路上有很多小景点，不过我们没有选择去全部地点，只去了第一驿站和最后一站，其实中途有很多其他的景点，比如说骑马或者坐滑翔机之类的，不过我们不是很感兴趣就跳过了</p><p>当然如果你中途下车了是可以等下一班车继续的（只要车没坐满</p><h3 id="莫日格勒河"><a href="#莫日格勒河" class="headerlink" title="莫日格勒河"></a>莫日格勒河</h3><p>这一站其实是终点站，当时因为我朋友睡着了，我们就直接先坐到了终点站，莫日格勒河是这里主要的观景点</p><p>在这里可以直接登山观景台～</p><p><img src="https://img.juniortree.com/202410032227149.webp"></p><p>我们是从右边的入口进去的，之后会从左边的通道出来（跟着人流走就ok</p><p>路上走的时候，往右边看是大草甸</p><p><img src="https://img.juniortree.com/202410032234626.avif"></p><p>登上去之后就可以看到莫日格勒河啦，像肠子一样弯弯曲曲，<del>想起了高中地理的试题</del></p><p><img src="https://img.juniortree.com/202410032231965.webp"></p><p>下面这一张我不确定是不是在顶上拍的，不过景色应该比较类似</p><p><img src="https://img.juniortree.com/202410032255388.avif"></p><p>上面风其实还挺大的，建议多穿点，整一件冲锋衣其实很不错</p><p>嘿嘿嘿，朋友尼康给我拍的，感觉还不错</p><p><img src="https://img.juniortree.com/202410032253310.avif"></p><p>你要是仔细观察会发现两边草不太一样，一边比较高，一边比较矮，尤其是秋天草黄了之后其实还挺好看的</p><p><img src="https://img.juniortree.com/202410032257613.avif"></p><p>下图的左边就是我们上来的路，相对靠右的就是回去的路，下面是一个换乘站，也是呼伦贝尔大草原的摆渡车终点站</p><p><img src="https://img.juniortree.com/202410032300859.avif"></p><h3 id="坐车中"><a href="#坐车中" class="headerlink" title="坐车中"></a>坐车中</h3><p>车很颠簸，路很小，单车道乡道</p><p><img src="https://img.juniortree.com/202410032304560.avif"></p><p>在坐车途中我拍到一张特别特别特别特别喜欢的照片，相机显示屏上面显示的效果非常非常非常好，但是拿出电脑开始预览就歇菜了，没对上焦，我懊恼了很久，基本构图还是很漂亮的，光影也很漂亮</p><p><img src="https://img.juniortree.com/202410032307693.avif"></p><p>有机会还是建议大家多看看窗外，还是很有意思的，尤其是看到外面无边无际的草原，对于我这种从小生活在南方丘陵小城的孩子来说还是很震撼的</p><h3 id="一号驿站"><a href="#一号驿站" class="headerlink" title="一号驿站"></a>一号驿站</h3><p>如果说莫日格勒河只能远远的看的话，那么一号驿站就是一个能切身体会大草原的地方</p><p>下车之后，驿站的本体其实就是个买东西的小店，真正的看头在房子的对面，对面有牧民给护栏开了个口子，每个人交20块钱就可以进去，还拴了两头比较小的羊咩咩，还有一些草垛提供给游客拍照</p><p>下图居中的部分就是一号驿站，密密麻麻的人就是交钱撸羊和拍照的游客</p><p><img src="https://img.juniortree.com/202410032311953.avif"></p><p>进入之后才是我心中正在草原应该有的样子，非常非常非常非常自由</p><p><img src="https://img.juniortree.com/202410032318125.avif"></p><p><img src="https://img.juniortree.com/202410032320866.avif"></p><p><img src="https://img.juniortree.com/202410032321854.avif"></p><p><img src="https://img.juniortree.com/202410032321784.avif"></p><h2 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h2><p>之前说了散客只能跟本地团或者自己租车，广西老哥他们由于目的地和我们不太一样，因此半路先走了，我们只能自己想办法回去</p><p>我们打算回市区的时候大概已经三点快四点了</p><p>后来运气还挺好，我们在高德上打到了回程车，师傅和我们说他刚好送一群小伙子从市区过来</p><p>不得不说内蒙古老乡真的热情，一路上我们问师傅有啥好吃的，他一个劲给我们推荐，给我们介绍去哪里玩</p><p>至于价格师傅是打表的（是高德上打的正经出租车，从景点到市区大概25公里，花了刚好80块，平时这段国道是要收费的，因为我没打过这么远的，因此价格只供参考</p>]]></content>
      
      
      <categories>
          
          <category> 旅行日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day0 内蒙古之旅——出发！</title>
      <link href="/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/Day0%20%E5%86%85%E8%92%99%E5%8F%A4%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E5%87%BA%E5%8F%91%EF%BC%81/"/>
      <url>/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/Day0%20%E5%86%85%E8%92%99%E5%8F%A4%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E5%87%BA%E5%8F%91%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Day0-内蒙古之旅——出发！"><a href="#Day0-内蒙古之旅——出发！" class="headerlink" title="Day0 内蒙古之旅——出发！"></a>Day0 内蒙古之旅——出发！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在今年国庆期间，我和一位朋友来到了海拉尔</p><p>我是从北京出发，乘坐K1301次列车，坐了大概28个小时</p><p><img src="https://img.juniortree.com/202410032330489.avif"></p><p>路上穿过河北、辽宁、吉林、黑龙江，欣赏了很多别样的风景，列车员阿姨很有意思，我喜欢喊她姨，她特别热情</p><p><img src="https://img.juniortree.com/202410032332582.avif"></p><h2 id="夜晚"><a href="#夜晚" class="headerlink" title="夜晚"></a>夜晚</h2><p>到达酒店办好入住之后我们到外面吃了小火锅，肉确实挺多，回来路上我们顺带走了走，就看到下面的风景：</p><p><img src="https://img.juniortree.com/202410032339211.avif"></p><p><img src="https://img.juniortree.com/202410032339543.avif"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器备份方案</title>
      <link href="/2024/11/02/Tech/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88/"/>
      <url>/2024/11/02/Tech/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%87%E4%BB%BD%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器备份方案"><a href="#服务器备份方案" class="headerlink" title="服务器备份方案"></a>服务器备份方案</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们实际的生产环境中，由于云服务存在很多的不稳定性，因此对服务器进行定时备份就很有必要了。</p><p>虽然部分服务器厂商提供了快照备份的功能，但是有些是要去收费的，对于我们这些个人用户并不是十分友好，在参考了众多论坛大佬的方案后，我总结出了一套基于<strong>Duplicati+Alist+阿里云盘</strong>的备份方案</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Alist"><a href="#Alist" class="headerlink" title="Alist"></a>Alist</h3><p>Alist官方提供了多种安装方式，在这里我直接使用<a href="https://alist.nn.ci/zh/guide/install/script.html">一键脚本</a>进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://alist.nn.ci/zh/guide/install/script.html</span><br></pre></td></tr></table></figure><p>安装完成之后进入到Alist到web界面，我们开始挂载阿里云盘</p><p>阿里云盘官方对Alist对支持非常好，具体挂载方式可以参考：</p><p><a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html">阿里云盘 Open</a></p><p>值得注意的是，如果你使用的也是北京阿里云的ecs，你可以在Alist的编辑界面中开启<strong>内部上传</strong>，这样的话走的就是阿里云的内网流量，带宽会快一点</p><p><img src="https://s2.loli.net/2024/10/08/n7SNs8I5UQ1grZo.png"></p><p>之后我们需要确定webdev的挂载路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/webdev</span><br></pre></td></tr></table></figure><p>之后对于具体的挂载方式，请参考：</p><p><a href="https://github.com/alist-org/alist/discussions/5470">Ubuntu系统挂载Alist网盘 WebDav服务完全指南</a></p><h3 id="Duplicati"><a href="#Duplicati" class="headerlink" title="Duplicati"></a>Duplicati</h3><p>Duplicati的安装支持使用Docker，在这里我们直接使用docker-compose进行部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  backup:</span><br><span class="line">    image: lscr.io/linuxserver/duplicati:latest</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=0</span><br><span class="line">      - PGID=0</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - 8200:8200</span><br><span class="line">    volumes:</span><br><span class="line">      - /root:/source/root  # 挂载整个 /root 目录</span><br><span class="line">      - /etc:/source/etc    # 挂载整个 /etc 目录</span><br><span class="line">      - ./duplicati/config:/config  # 挂载配置文件目录</span><br><span class="line">      - ./duplicati/backups:/backups  # 挂载备份文件目录</span><br><span class="line">      - /mnt/webdav:/backups_webdav</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure><p>在<code>/source/</code>这里你可以更改你自己所需要备份的路径</p><p>之后启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>等待安装完成，进入web界面：<code>http://IP:8200</code></p><h2 id="备份设置"><a href="#备份设置" class="headerlink" title="备份设置"></a>备份设置</h2><p>进入web之后我们需要做的第一件事情就是设定密码！！！</p><p>首先进入到设置，然后输入密码，点左边的小方块，最后划到最下面进行确认，之后会要求你进行重新登陆，输入密码</p><p><img src="https://s2.loli.net/2024/10/08/ZuoDTqnhSkxswia.png"></p><p>之后我们就可以正式开始备份了：</p><p><img src="https://s2.loli.net/2024/10/08/AB31mZ68c4oURsq.png"></p><p>选择一个名字，这里我推荐你选择一个密码，请牢记</p><p><img src="https://s2.loli.net/2024/10/08/gKdSj4plLnTVfbv.png"></p><p>这里的路径选择之前我们在docker-compose中挂载的路径：<code>backups_webdev</code></p><p><img src="https://s2.loli.net/2024/10/08/xrc32IpE9fUPKZi.png"></p><p>之后点击“下一步”，我们选择“计算机”，之后选择“source”</p><p><img src="https://s2.loli.net/2024/10/08/cvbRleIWtsSKfMi.png"></p><p><img src="https://s2.loli.net/2024/10/08/LXAlsViqp6JvySN.png"></p><p>选择“下一步”，之后选择同步周期：</p><p><img src="https://s2.loli.net/2024/10/08/439G27JTZmwuLjs.png"></p><p>之后再点击“下一步”，在这里我建议你使用“智能备份保留策略”，这样的话比较古早的备份就会自动被删除，减少云盘的占用</p><p><img src="https://s2.loli.net/2024/10/08/UZWhKXbLPVMIgaT.png"></p><p>点击“保持”即可结束配置，回到主页，点击“立即允许”，之后即可查看是否备份成功</p><p><img src="https://s2.loli.net/2024/10/08/DEQAiTb6H7wgq1n.png"></p><p>备份成功之后在Alist中的对应文件夹中也可以找到文件的身影</p><p><img src="https://s2.loli.net/2024/10/08/EH2gwOnbFljTaWp.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就这样，一个增量式服务器备份就水灵灵得的部署好了</p><p>当然你也可以使用其他的存储云盘，比如说onedrive，google drive等等（当然前提是你的网络环境允许你这样做</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 技术 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再失眠</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%86%8D%E5%A4%B1%E7%9C%A0/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%86%8D%E5%A4%B1%E7%9C%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="再失眠"><a href="#再失眠" class="headerlink" title="再失眠"></a>再失眠</h1><p>失眠又再一次席卷而来，很难说是因为舍友的呼噜声还是我自己的原因，最近都处在困意和清醒的边缘之间</p><p>事实上来大学之后我就很少睡过特别踏实的觉，早上睡到八九点，然后下午继续睡</p><p>想写很多很多，但是每一次又刚提笔又搁下</p><p>转专业后的路途显然也不是一帆风顺的，化学比我想的要更难，越来越感觉自己脑子不好用了，尤其是对公式不敏感——其实一直都是这样</p><p>我其实一直觉得自己是一个物质欲比较低的人，可是每次看到钱包空空，又想买自己想要的东西会很焦虑</p><p>虽然说应该安慰自己未来的路尚且未来，可是有些焦虑是不可避免的，是必须要考虑的问题</p><p>熬夜容易饿，干了三个香蕉</p><p>看看书吧，总感觉自己词不达意</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦境是现实的延伸</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E6%A2%A6%E5%A2%83%E6%98%AF%E7%8E%B0%E5%AE%9E%E7%9A%84%E5%BB%B6%E4%BC%B8/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E6%A2%A6%E5%A2%83%E6%98%AF%E7%8E%B0%E5%AE%9E%E7%9A%84%E5%BB%B6%E4%BC%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="梦境是现实的延伸"><a href="#梦境是现实的延伸" class="headerlink" title="梦境是现实的延伸"></a>梦境是现实的延伸</h1><p>从小我就爱做梦，做了大大小小的梦，当我一一将这些梦境分享给别人的时候，他们总会说：</p><blockquote><p>“你做的梦好有逻辑！”</p></blockquote><p>后来我自己转念一想，好像确实是这个逻辑，在梦里我碰到的人，事情，有很多都是在现实生活中出现过的</p><p>今天下午在长达两个半小时的午睡的过程中，我又开启了一场“探险”</p><p>我梦到自己似乎回到了民国时期，自己变身成为了一名战士，和敌人做斗争，里面的剧情和场景似乎和之前看到的谍战片电视剧有点类似，由于梦境过于真实，当我醒过来的时候感觉自己出了一身冷汗</p><p>之前有科学家说，人会做梦是因为大脑在整理记忆碎片，可是我已经很久没有看过谍战片啦，或许是之前很久的记忆被大脑翻出来啦？</p><p>做梦其实是不舒服的，每次做梦醒过来都会感觉好累好累，相反那种“婴儿香”的睡眠才更加舒服</p><p>可是我还是喜欢做梦，我觉得梦是我想象力的体现，在梦里我能体会到各种各样不一样的体会和滋味</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家人平安便是我最大的愿望</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%AE%B6%E4%BA%BA%E5%B9%B3%E5%AE%89%E4%BE%BF%E6%98%AF%E6%88%91%E6%9C%80%E5%A4%A7%E7%9A%84%E6%84%BF%E6%9C%9B/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%AE%B6%E4%BA%BA%E5%B9%B3%E5%AE%89%E4%BE%BF%E6%98%AF%E6%88%91%E6%9C%80%E5%A4%A7%E7%9A%84%E6%84%BF%E6%9C%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="家人平安便是我最大的愿望"><a href="#家人平安便是我最大的愿望" class="headerlink" title="家人平安便是我最大的愿望"></a>家人平安便是我最大的愿望</h1><p>写作业的时候突然想起去年的这个时候，我的一个朋友母亲脑溢血突发住院，她给我发微信语音，撕心裂肺的画面</p><p>最近其实一直都很迷茫，不知道自己该做什么，自己期待什么</p><p>想到这里，我突然觉得我自己最期待的应该是家人健健康康陪在我身边，哪怕是平平淡淡，也是一种幸福</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冥冥之中注定的失败</title>
      <link href="/2024/11/02/%E6%B7%B1%E5%85%A5%E6%80%9D%E8%80%83/%E5%86%A5%E5%86%A5%E4%B9%8B%E4%B8%AD%E6%B3%A8%E5%AE%9A%E7%9A%84%E5%A4%B1%E8%B4%A5/"/>
      <url>/2024/11/02/%E6%B7%B1%E5%85%A5%E6%80%9D%E8%80%83/%E5%86%A5%E5%86%A5%E4%B9%8B%E4%B8%AD%E6%B3%A8%E5%AE%9A%E7%9A%84%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="冥冥之中注定的失败"><a href="#冥冥之中注定的失败" class="headerlink" title="冥冥之中注定的失败"></a>冥冥之中注定的失败</h1><p>虽然在白芷小姐的帮助下，我们的Dis似乎正在走向正轨：定制的勋章、限定的季节徽章、写好的宣传小册以及较为完备的宣传计划，但是我还是觉得这个项目注定是失败的，或者是很难成功变得热门的</p><h2 id="起航"><a href="#起航" class="headerlink" title="起航"></a>起航</h2><p>我曾不止一次说过最初的想法来自北大的BBS<strong>北大未名</strong>，之后是依赖于开源项目Discourse，参考了国内高校交大门。在刚开始的时候我们只考虑了相关的技术可行性，但是没有考虑到运维</p><p>拿<strong>北大未名</strong>来说吧，我刚开始看到的，觉得这是一个<strong>校园聚合</strong>平台，各种各样的学校官方部门，学生组织、社团等都能加入，发布信息</p><p><img src="https://img.duckk.org/2024/10/17c6a83b372fe62074b98059c76915cd.png"></p><p><img src="https://img.duckk.org/2024/10/d203e5d7e1bbba2ebdb2628a4c8acd29.png"></p><p><img src="https://img.duckk.org/2024/10/99fa695367c234d36237b26861432898.png"></p><p>受到认证的会带上和微博一样的<strong>V</strong>标，显然<strong>北大未名</strong>获得了官方的支持</p><p>至于交大门，给我的感觉就是更加偏向于CS，其实从发帖的编辑器就可以初见端倪，支持Markdown，一般来说如果没有经受过计算机或者数学训练的用到MD会比较少</p><p>交大门能够存活其实和其中存在很大一部分富有CS精神的同学有很大的关系，包括其中计算机图像学课程的入驻，帮助了该站的进一步发展，算是半官方的一个论坛</p><p><img src="https://img.duckk.org/2024/10/6abb58b6bbedb46535119c1177840790.png"></p><p><img src="https://img.duckk.org/2024/10/3895a877630199f100b6fed4f520b554.png"></p><p>虽然说交大门没有完全获得官方的认证，但是管理员是匿名的，这就意味着就算官方想要取缔或者强制关站是很困难的</p><p>交大门其中在建站早期遭受到DNS污染，最后还是存活了下来；但是如果管理员的身份被暴露，想必关站是迟早的事情</p><p>交大门的管理员本人也算是Discourse类论坛架构的狂热者，为该站的维护做出了不可磨灭的贡献</p><p>与其类似的还有瓜大萌，这也是一个基于Discourse的学生论坛，虽然说注册人数早破千人，但是这个站热度不高，在2024年后热度出现了断层式下降，在2023年4月推出了选课</p><p>具体原因不明，但是我感觉其实和管理层还是有关系的，我总结了一下学生论坛应该或者至少包含以下板块</p><ul><li>校园生活（树洞、表白墙）</li><li>学习&#x2F;选课（选课社区）</li><li>保研&#x2F;竞赛</li><li>内部推免</li></ul><p>至于另外一个水源社区，因为被官方收编了，没有办法一探究竟，因此就一概而论啦～</p><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>为什么说我们“注定的失败”</p><p>第一，这个项目真正愿意花心思来运维的很少，建站容易维护难，在2024年8月份刚开始建站的时候我本人是一股热血，之后9月份宣传之后有大概20个人注册，之后我也没啥动力去维护</p><p>在10月国庆之后，我们决定去大肆宣传论坛，才继续将其进行“现代化改造”</p><p>技术上的困难往往是最容易克服的，大不了多熬几夜，但是zc上的不确定性才是最难搞的，这也是我即将阐述的第二点</p><p>因为学校本质上是不让搞这样的论坛的，我们刚开始是匿名搞，后来是假借电脑社的名义搞的，一旦热门起来引起学校的注意，就不仅仅是DNS污染这么简单了</p><p>第三点，我们没办法提供很优质的服务，在前面我说过：</p><blockquote><p>我总结了一下学生论坛应该或者至少包含以下板块</p><ul><li>校园生活（树洞、表白墙）</li><li>学习&#x2F;选课（选课社区）</li><li>保研&#x2F;竞赛</li><li>内部推免</li></ul></blockquote><p>事实上这些东西不能仅仅依赖于我或者管理组一个人的力量，我们很难搜集齐这么多的东西，可能我可以搜集生科的，其他人可以搜集计科的，那么其他的呢？</p><p>我觉得CNU是缺乏Geek精神的，虽然我们经常诟病表白墙的商业性，但是他们的互助选课文档确实是非常好的，给了很多人一些极具价值的选课意见</p><p>也许在未来我们也会加入选课专栏？也许在未来我们吸引一些研究生的加入，去优化一些推免等等其他信息？</p><p>第四点，来自于Discourse本身，尽管它很优秀，但是它不适合纯文科类或者艺术类的同学</p><p>这个观点来自于我看我朋友注册和发帖，感觉和主流的一些软件，比如说微信、QQ或者贴吧相比，大家对于这种Web的接受度不是很高，在未经提醒的情况下发帖甚至都成为了问题</p><p>当然这个问题也有可能是我们的指引做的不够好，或者是极特殊的个例，在未来我们可能会对其进行优化或者写专门的教程</p><p>第五点，用户的心理，很多人可能上上论坛看看，看看大家发了些什么帖子，但是自己不发帖子。这样大家你不发，我不发，没有新鲜的信息注入，大家愿意刷的欲望就降低了，在未来我们应该要去鼓励用户发帖</p><p>在这一点，梨梨花同学其实给了很多建议，比如说建立一些比较详细的分区，让大家知道哪里可以找到自己的一方天地。另外要采取一些比较有效的奖励措施，鼓励用户发帖，比如说新设计的季节勋章等等</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>写的有点累了，在此停笔吧，我尽力维护下去，不管最后结果是什么，我觉得这都是值得写入我人生简历中的一部分</p>]]></content>
      
      
      <categories>
          
          <category> 深入思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八月末——梦</title>
      <link href="/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%85%AB%E6%9C%88%E6%9C%AB%E2%80%94%E6%A2%A6/"/>
      <url>/2024/11/02/%E6%97%A5%E5%B8%B8/%E5%85%AB%E6%9C%88%E6%9C%AB%E2%80%94%E6%A2%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="8月末——梦"><a href="#8月末——梦" class="headerlink" title="8月末——梦"></a>8月末——梦</h1><p>最近一直重复在做一个梦，关于导师、科研</p><p>虽然说我现在还和导师素未蒙面，但是这种焦虑和可怖无疑是真实的</p><p>近距离地接触到迷茫</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/testpage/"/>
      <url>/2024/11/02/%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/testpage/</url>
      
        <content type="html"><![CDATA[<p>$\sum_{i&#x3D;0}$<br>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 旅行日记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
